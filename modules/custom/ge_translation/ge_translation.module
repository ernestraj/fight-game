<?php

function ge_language_list($source_langcode, $account = NULL, $node_type) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  $language_list = language_list();
  foreach ($language_list as $langcode => $language) {
    if ($langcode == $source_langcode) {
      unset($language_list[$langcode]);
    }
  }
  return $language_list;
}

/**
 * Generates a list of links to available moderation actions.
 *
 * @param $node
 *   The node being acted upon.
 * @param $url_options
 *   An array of options to pass, following the url() function syntax.
 *
 * @return
 *   A list of links to display with the revision.
 */
function _get_links($text, $path, $langcode, $options = array()) {
  $type = variable_get('translation_language_type', LANGUAGE_TYPE_INTERFACE);
  $links = language_negotiation_get_switch_links($type, $path);
// When node not published, links don't have href so we use path instead
// Note: this is a bug in Core translation module, see http://drupal.org/node/1137074
  if (!empty($links->links[$langcode]) && !empty($links->links[$langcode]['href'])) {
    $options += array('attributes' => array(), 'html' => FALSE);
    $options['attributes'] += $links->links[$langcode]['attributes'];
    $options += $links->links[$langcode];
    $path = $links->links[$langcode]['href'];
  }
  return l($text, $path, $options);
}

function ge_get_translation_links($node, $url_options = array()) {
// Build links to available moderation states.
  $links = array();
  $my_revision = $node->workbench_moderation['my_revision'];
  if ($my_revision->vid == $node->workbench_moderation['current']->vid && $languages = ge_language_list($node->language, NULL, $node->type)) {
    $translations = translation_node_get_translations($node->tnid);
    foreach ($languages as $langcode => $language) {
      if (isset($node->field_country)) {
        $country_tid = $node->field_country['und'][0]['tid'];
        $term = taxonomy_term_load($country_tid);
      }
      $list = array();
      if (!empty($term->field_country_language)) {
        $langs = $term->field_country_language['und'];
        foreach ($langs as $lang) {
          $list[] = $lang['tid'];
        }
      }
      $all = taxonomy_term_load_multiple($list);
      $flag = FALSE;
      foreach ($all as $each) {
        if ($langcode == $each->name)
          $flag = TRUE;
      }
      $link = $url_options + array('language_name' => $language->name);
      if (empty($translations[$langcode]) && ($flag == TRUE)) {
// Create translation
        $link['title'] = t('create');
        $link['href'] = 'translation/add/' . str_replace('_', '-', $node->type);
        $link['query']['source_nid'] = $node->nid;
        $link['query']['source_vid'] = $node->vid;
        $link['query']['target'] = $langcode;
        $text = t('add translation');
        $path = 'node/add/' . str_replace('_', '-', $node->type);
        $query = array('query' => array('translation' => $node->nid, 'target' => $langcode));
        $options = _get_links($text, $path, $langcode, $query);
        $links[$langcode] = check_plain($language->name) . ': ' . $options;
      }
      else {
        if ($flag) {
          $translation_node = node_load($translations[$langcode]->nid);
          $link['title'] = t('edit');
          $link['href'] = "node/{$translation_node->nid}/edit";
          $links[$langcode] = check_plain($language->name) . ': ' . l($link['title'], $link['href'], $link);
        }
      }
    }
  }

  $session_country = $_SESSION['country'];
  if ($session_country == $country_tid) {
    return $links;
  }
  else {
    return '';
  }
}

/**
 * Implementation of hook_help().
 */
function ge_translation_help($section, $arg) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Select translation provides a views filter and a module API, allowing users to display only one of the nodes of a group of nodes representing a translation');
  }
}

/**
 * Implementation of hook_views_api
 */
function ge_translation_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'ge_translation'),
  );
}

/**
 * Implements hook_menu_alter
 */
function ge_translation_menu_alter(&$items) {
  if (isset($items['node/%node/translate'])) {
    $items['node/%node/translate']['page callback'] = 'ge_translation_translation_overview';
  }
}

function ge_translation_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($form['#form_id'] == 'i18n_node_select_translation' && ($user->uid != 1)) {
    hide($form['translations']);
  }
}

/**
 * Overview page for a node's translations.
 *
 * @param $node
 *   Node object.
 */
function ge_translation_translation_overview($node) {
  include_once DRUPAL_ROOT . '/includes/language.inc';
  if (!empty($node->tnid)) {
// Already part of a set, grab that set.
    $tnid = $node->tnid;
    $translations = translation_node_get_translations($node->tnid);
  }
  else {
// We have no translation source nid, this could be a new set, emulate that.
    $tnid = $node->nid;
    $translations = array($node->language => $node);
  }
  $type = variable_get('translation_language_type', LANGUAGE_TYPE_INTERFACE);
  $header = array(t('Language'), t('Title'), t('Status'), t('Operations'));
  $rows = array();
// Modes have different allowed languages
  foreach (i18n_node_language_list($node) as $langcode => $language_name) {
    if ($langcode == LANGUAGE_NONE) {
// Never show language neutral on the overview.
      continue;
    }
    $country_tid = $node->field_country['und'][0]['tid'];
    $term = taxonomy_term_load($country_tid);
    $list = array();
    if (!empty($term->field_country_language)) {
      $langs = $term->field_country_language['und'];
      foreach ($langs as $lang) {
        $list[] = $lang['tid'];
      }
    }
    $all = taxonomy_term_load_multiple($list);
    $flag = 0;
    foreach ($all as $each) {
      if ($langcode == strtolower(substr($each->name, 0, 2))) {
        $flag = 1;
      }
    }
    $options = array();
    if (isset($translations[$langcode]) && ($flag == 1)) {
// Existing translation in the translation set: display status.
// We load the full node to check whether the user can edit it.
      $translation_node = node_load($translations[$langcode]->nid);
      $path = 'node/' . $translation_node->nid;
      $title = i18n_node_translation_link($translation_node->title, $path, $langcode);
      if (node_access('update', $translation_node)) {
        $text = t('edit');
        $path = 'node/' . $translation_node->nid . '/edit';
        $options[] = i18n_node_translation_link($text, $path, $langcode);
      }
      $status = $translation_node->status ? t('Published') : t('Not published');
      $status .= $translation_node->translate ? ' - <span class="marker">' . t('outdated') . '</span>' : '';
      if ($translation_node->nid == $tnid) {
        $language_name = t('<strong>@language_name</strong> (source)', array('@language_name' => $language_name));
      }
      $rows[] = array($language_name, $title, $status, implode(" | ", $options));
    }
    else {
      if ($flag == 1) {
// No such translation in the set yet: help user to create it.
        $title = t('n/a');
        if (node_access('create', $node->type) && isset($node->field_country) && $node->field_country['und'][0]['tid'] == $_SESSION['country']) {
          $text = t('add translation');
          $path = 'node/add/' . str_replace('_', '-', $node->type);
          $query = array('query' => array('translation' => $node->nid, 'target' => $langcode));
          $options[] = i18n_node_translation_link($text, $path, $langcode, $query);
        }
        $status = t('Not translated');
        $rows[] = array($language_name, $title, $status, implode(" | ", $options));
      }
    }
  }
  if ($tnid != 0) {
    entity_get_controller('node')->resetCache(array($tnid));
  }
  drupal_set_title(t('Translations of %title', array('%title' => $node->title)), PASS_THROUGH);
  $build['translation_node_overview'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );

  if (user_access('administer content translations')) {
    $build['translation_node_select'] = drupal_get_form('i18n_node_select_translation', $node, $translations);
  }
  return $build;
}
