<?php
 
/**
 * hook theme for invoking different template files 
 */
function ge_benefits_tweaks_theme($existing, $type, $theme, $path) {
  return array(
    'template_1bullets' => array(
      'template' => 'template_onebullets',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_2bullets' => array(
      'template' => 'template_2bullets',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_3bullets' => array(
      'template' => 'template_3bullets',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_one' => array(
      'template' => 'template_one',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_two' => array(
      'template' => 'template_two',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_three' => array(
      'template' => 'template_three',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_four' => array(
      'template' => 'template_four',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_table' => array(
      'template' => 'template_table',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_imageleft' => array(
      'template' => 'template_imageleft',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_imageright' => array(
      'template' => 'template_imageright',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_sidebar_left' => array(
      'template' => 'template_sidebar_left',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_sidebar_right' => array(
      'template' => 'template_sidebar_right',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_well' => array(
      'template' => 'template_well',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_abbreviation' => array(
      'template' => 'template_abbreviation',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_quotes' => array(
      'template' => 'template_quotes',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_structured_list' => array(
      'template' => 'template_structured_list',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_inline_list' => array(
      'template' => 'template_inline_list',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_description_defination' => array(
      'template' => 'template_description_defination',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
    'template_horizontal_description_list' => array(
      'template' => 'template_horizontal_description_list',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
	'template_flipper' => array(
      'template' => 'template_flipper',
      'path' => drupal_get_path('theme', 'adminimal_theme') . '/ckeditor-tpl/',
      'arguments' => array('arg' => NULL),
    ),
  );
}

function _recent_all_view_remove_archive(&$form, &$form_state) {
  unset($form['state']['#options']['archive']);
  return $form;
}

/**
 * Implements hook_form_alter().
 */
function ge_benefits_tweaks_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  // load template file content
  $data = array(
    'adminimal' => array(
      'template_table' => theme('template_table'),
      'template_four' => theme('template_four'),
      'template_three' => theme('template_three'),
      'template_two' => theme('template_two'),
      'template_one' => theme('template_one'),
      'template_1bullets' => theme('template_1bullets'),
      'template_2bullets' => theme('template_2bullets'),
      'template_3bullets' => theme('template_3bullets'),
      'template_imageright' => theme('template_imageright'),
      'template_imageleft' => theme('template_imageleft'),
      'template_sidebar_left' => theme('template_sidebar_left'),
      'template_sidebar_right' => theme('template_sidebar_right'),
      'template_well' => theme('template_well'),
      'template_abbreviation' => theme('template_abbreviation'),
      'template_quotes' => theme('template_quotes'),
      'template_structured_list' => theme('template_structured_list'),
      'template_inline_list' => theme('template_inline_list'),
      'template_description_defination' => theme('template_description_defination'),
      'template_horizontal_description_list' => theme('template_horizontal_description_list'),
	  'template_flipper' => theme('template_flipper')
    ),
  );
  drupal_add_js($data, 'setting');
  if($form['#id'] == 'views-exposed-form-all-recent-content-page') {
     if(!in_array('super_user', $user->roles))
       $form['#after_build'][] = '_recent_all_view_remove_archive';
  }
  elseif($form_id == 'taxonomy_overview_terms' && ($form['#vocabulary']->name == 'policy and procedure categories'
    || $form['#vocabulary']->name == 'Terms Translations')) {
    $keys = array_keys($form);
    foreach($keys as $item) {
      if(substr($item, 0, 3) == 'tid') {
        if($form[$item]['#term']['language'] != 'en') {
          unset($form[$item]);
        }
      }
    }
  }	
  elseif($form['#id'] == 'views-exposed-form-pandp-page') {
    $voc = taxonomy_vocabulary_machine_name_load('policy_and_procedure_categories');
    $terms = i18n_taxonomy_get_tree($voc->vid, 'en');
    foreach($terms as $term) {
      $new = $object = new stdClass();
      $new->option = array($term->tid=>$term->name);
      $options[] = $new;
    }
    $form['field_policy_category_tid']['#options'] = $options;
  }
  elseif($form_id == 'i18n_taxonomy_translation_term_form') {
    unset($form['translations']);
  }
  if ($form_id == 'add_page_node_form' || $form_id="link_to_a_document_node_form") {
	$form['#validate'][] = 'unique_field_validate';
  }  
  else if ($form_id == 'news_article_node_form') {
	$form['field_link_type_new']['und'][0]['field_link_type']['und']['#description'] = '<a class="tips"  title="Select Type of Content.">?</a>';
  }
  else if($form_id == 'section_node_form'){
	$form['field_section']['und'][0]['field_title']['und']['#description'] = '<a class="tips"  title="Please enter a Section Title.">?</a>';
	$form['field_section']['und'][0]['field_title']['und'][0]['value']['#description'] = '<a class="tips"  title="Please enter a Section Title.">?</a>';
	$form['field_section']['und'][0]['field_body_image_alignment']['und']['#description'] = '<a class="tips"  title="Select a Body Image Alignment.">?</a>';
	$form['field_section']['und'][0]['field_body_image_type']['und']['#description'] = '<a class="tips"  title="Select a Body Image Type.">?</a>';
	$form['field_section']['und'][0]['field_body_image']['und'][0]['#description'] = '<a class="tips tips-i-pr"  title="Upload a Body Image.">?</a>';
	$form['field_section']['und'][0]['field_asset']['und']['#description'] = '<a class="tips tips-p-r"  title="Upload a File(s).">?</a>';
	$form['field_section']['und'][0]['field_link_type_new']['und'][0]['field_link_type']['und']['#description'] = '<a class="tips"  title="Select Type of Content.">?</a>';
	$form['field_section']['und'][0]['field_link_type_new']['und'][0]['field_title']['und']['#description'] = '<a class="tips"  title="Please enter a Title.">?</a>';
	$form['field_section']['und'][0]['field_link_type_new']['und'][0]['field_title']['und'][0]['#description'] = '<a class="tips"  title="Please enter a Title.">?</a>';
	$form['field_section']['und'][0]['field_link_type_new']['und'][0]['field_title']['und'][0]['value']['#description'] = '<a class="tips"  title="Please enter a Title.">?</a>';
	$form['field_section']['und'][0]['field_link_type_new']['und'][0]['field_image']['und'][0]['#description'] = '<a class="tips tips-i-pr"  title="Upload an Image.">?</a>';
	$form['field_section']['und'][0]['field_link_style']['und']['#description'] = '<a class="tips"  title="Select a Link Style.">?</a>';
	$form['field_section']['und'][0]['field_section_type_list']['und']['#description'] = '<a class="tips"  title="Select a Section Type.">?</a>';
	$form['field_section']['und'][0]['field_section_ids']['und'][0]['#description'] = '<a class="tips"  title="Please enter a Section ID(s).">?</a>';
	$form['field_section']['und'][0]['field_section_ids']['und'][0]['value']['#description'] = '<a class="tips"  title="Please enter a Section ID(s).">?</a>';
  }
  if($form['#id'] == 'views-form-tax-entityreference-view-widget-1') {
    unset($form['actions_ervw']);
  }
}

function unique_field_validate($form, &$form_state) {
  if (!empty($form_state['values']['field_unique_page_name']['und'][0]['value'])) {
    if (count(explode(' ', $form_state['values']['unique_page_name']['und'][0]['value'])) > 1) {
      form_set_error('field_deep_link_path', "Please enter a unique string for deep link path which doesn't contain spaces.");
    }
    elseif (!ctype_alnum($form_state['values']['field_unique_page_name']['und'][0]['value'])) {
      form_set_error('field_deep_link_path', "Special Characters are not allowed for unique page name field.");
    }
  }
}

function ge_benefits_tweaks_taxonomy_term_update($term) {
  if ($term->vocabulary_machine_name == "country") {
    $country = $term->name;
    cache_clear_all('country_data' . $country . '_tid', 'cache');
    cache_clear_all('country_data' . $country . '_lang', 'cache');
  }
}

/**
 * Implements hook_field_widget_form_alter
 */
function ge_benefits_tweaks_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == "taxonomy_term_reference" && $context['instance']['widget']['type'] == 'taxonomy_autocomplete') {
    $element['#maxlength'] = 7000;
  }
  elseif (($context['field']['field_name'] == 'field_file' || $context['field']['field_name'] == 'field_asset') && $context['instance']['widget']['type'] == 'file_generic') {
    $element_children = element_children($element, TRUE);
    foreach($element_children as $key) {
      $element[$key]['#process'][] = 'ge_benefits_tweaks_file_field_description_required';
    }
  }
  elseif(($context['field']['field_name'] == 'field_file' || $context['field']['field_name'] == 'field_document') && $context['instance']['widget']['type'] == 'file_generic') {
    $element_children = element_children($element, TRUE);
    foreach($element_children as $key) {
      $element[$key]['#process'][] = 'ge_benefits_tweaks_file_field_description_label_description';
    }
  }
   /* if ($context['instance']['widget']['type']=='field_collection_embed') {
      // @todo check for field name
      array_unshift($element['#element_validate'], 'field_description_validate_line_item');
      
  }*/
}

/**
 * Implements hook_permission().
 * Defines a new permission for hiding the edit/view tab
 */
function ge_benefits_tweaks_permission() {
  return array(
    'view edit tab' => array(
      'title' => t('View edit tab on user profile page'),
    )
  );
} 
 
/**
 * Implements hook_user_view().
 */ 
function ge_benefits_tweaks_user_view($account, $view_mode, $langcode) {
  // Set the page title of the user profile page to the user's full name.
  $wrapper = entity_metadata_wrapper('user', $account);
  $first_name = $wrapper->field_first_name->value() ? $wrapper->field_first_name->value() : $_SERVER['HTTP_GIVENNAME'];
  $last_name = $wrapper->field_last_name->value() ? $wrapper->field_last_name->value() : $_SERVER['HTTP_SN'];
  if ($first_name || $last_name) {
    //Set the page title to FirstName + LastName
    drupal_set_title($first_name . ' ' . $last_name);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */ 
function ge_benefits_tweaks_menu_local_tasks_alter(&$data) {
  if(isset($data['tabs'][0]['output'])) {
    // Check to see if user has permission to view the edit tab.
    if (!user_access('view edit tab')) {
      foreach ($data['tabs'][0]['output'] as $key => $value) {
        if ($value['#link']['path'] == "user/%/edit" || $value['#link']['path'] == "user/%/view") {
          // Hide the tab
          unset($data['tabs'][0]['output'][$key]);
        }
      }
    }
  }
}

function ge_benefits_tweaks_views_pre_render(&$view) {
  if ($view->name == 'content_by_country_new' && $view->current_display == 'page') {
    $tid = arg(2);
    $taxonomy = taxonomy_term_load($tid);
    // set page title here
    $view->build_info['title'] = "Content for country: ".$taxonomy->field_country_name['und'][0]['value'];
  }
}

/**
 * @file
 * Provides special token to use with pathauto.
 *
 * @see httx://drupal.org/node/1308488
 */

/**
 * Provide information about our custom placeholder/token.
 *
 * @see httx://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_token_info/7
 * @see httx://api.lullabot.com/token_example_token_info/7
 * @return array
 *   An associative array of available tokens and token types.
 */
function ge_benefits_tweaks_token_info() {
  $info['types']['session'] = array(
    'name' => t('session'),
    'description' => ('Tokens for session'),
  );
    $info['tokens']['session']['country_code'] = array(
        'name' => t('country_code'),
        'description' => t('Country ready for use with fielpath.'),
    );
    return $info;
}

/**
 * Provide replacement values for placeholder tokens.
 *
 * @see httx://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_tokens/7
 * @see httx://api.lullabot.com/token_example_tokens/7
 * @param string $type
 *   The machine-readable name of the type (group) of token being replaced, such
 *   as 'node', 'user', or another type defined by a hook_token_info()
 *   implementation.
 * @param array $tokens
 *   An array of tokens to be replaced. The keys are the machine-readable token
 *   names, and the values are the raw [type:token] strings that appeared in the
 *   original text.
 * @param array $data (optional)
 *   An associative array of data objects to be used when generating replacement
 *   values, as supplied in the $data parameter to token_replace().
 * @param array $options (optional)
 *   An associative array of options for token replacement; see token_replace()
 *   for possible values.
 * @return array
 *   An associative array of replacement values, keyed by the raw [type:token]
 *   strings from the original text.
 */
function ge_benefits_tweaks_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();
    $sanitize = !empty($options['sanitize']);
    $country=$_SESSION['country'];
if($country){
  $term= taxonomy_term_load($country);
       foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'country_code':
                    $replacements[$original] = $term->name;
                    break;
            }
        }
    
}
    return $replacements;
}

function ge_benefits_tweaks_init() {
  if (!empty($_FILES['files']) && variable_get('transliteration_file_uploads', TRUE)) {
    $_SESSION['original_file_names'] = $_FILES['files'];
  }
}

function ge_benefits_tweaks_file_field_description_label_description($element, &$form_state, $form) {
  $element['description']['#title'] = 'Search Title';
  $element['description']['#description'] = 'This title will be used as file title in search. If left empty File Title will be used as search title.';

  return $element;
}

/**
 * Require description to be set.
 */
function ge_benefits_tweaks_file_field_description_required($element, &$form_state, $form) {
  $element['description']['#title'] = 'File Title';
  $element['description']['#description']='Provide title of file, this title will show to users in search results.';

  $key = key($_SESSION['original_file_names']['name']);
  if(transliteration_clean_filename($_SESSION['original_file_names']['name'][$key]) == $element['#file']->filename) {
    $file_name = $_SESSION['original_file_names']['name'][$key];
  }
  if(empty($element['description']['#value']))
    $element['description']['#value'] = clean($file_name);

  return $element;
}

function clean($string) {
  $string = preg_replace('/\\.[^.\\s]{3,4}$/', ' ', $string);
  $string = str_replace('-', ' ', $string); // Replaces all hyphens with spaces.
  $string = preg_replace('/[^A-Za-z0-9\-]/', ' ', $string); // Removes special chars.

  return preg_replace('/ +/', ' ', $string); // Replaces multiple spaces with single one.
}

function ge_check_node_referred($nid) {
  $output = db_select('field_data_field_existing_url', 'existing_url')
    ->fields('existing_url', array('field_existing_url_target_id'))
    ->condition('field_existing_url_target_id', $nid)
    ->execute()
    ->fetchAll();

  if(!empty($output))
    return TRUE;
  else 
    return FALSE;
}


function ge_benefits_tweaks_node_insert($node) {
	 _clear_recent_content_view();
}
	
function ge_benefits_tweaks_node_update($node) {
	 _clear_recent_content_view();
}
	
function ge_benefits_tweaks_node_delete($node) {
	 _clear_recent_content_view();
}

function _clear_recent_content_view() {
	$view = views_get_view('all_recent_content');
    $view->set_display('page');
    $cache = $view->display_handler->get_plugin('cache');
    $cache->cache_flush();
}
