<?php

/*
 * @File- This is for filtering taxonomy terms using views fields 
 */

 /**
 * 
 * Implements hook_js_alter().
 */
function ge_filtering_js_alter(&$js) {  
  if ((arg(1)== 'workbench' && arg(2) == 'recent') || (arg(1)== 'recent' && arg(2) == 'all' && arg(3) == 'content')) {   
    $js_path = drupal_get_path('module', 'jquery_update') . '/replace/jquery/1.5/jquery.min.js';
    if (isset($js[$js_path])) {
      //unset conflicted javascript
      unset($js[$js_path]);
    }    
  }
}

/**
 * 
 * Implements hook_preprocess_views_view()
 */
function ge_filtering_preprocess_views_view(&$vars) {
  $view = &$vars['view'];
  // Make sure it's the correct view
  if (arg(1) != 'structure' && arg(2) != 'views' && ($view->name == 'workbench_recent_content' || $view->name == 'all_recent_content')) {
    // add needed javascript    
    drupal_add_js(drupal_get_path('module', 'jquery_update') . '/replace/jquery/1.7/jquery.min.js', array('group'=>-150,'weight'=> -60) );   
  }
}

/**
 * Overrides hook_menu
 */
function ge_filtering_menu() {
  $items = array();
  $items['access/denied'] = array(
    'title' => 'Access Denied',
    'page callback' => 'example_feed',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Override hook_permission
 */
function ge_filtering_permission() {
  return array(
    'assign project' => array(
      'title' => t('Assign Project'),
      'description' => t('Perform administration tasks for my module.'),
    ),
    'publish nodepage' => array(
      'title' => t('Publish node'),
      'description' => t('Publish node from node page itself.'),
    ),
  );
}

/**
 * Overrides hook_views_pre_view
 */
function ge_filtering_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'tax' && $display_id == 'term_reference_1') {
    $node = menu_get_object();
    if (isset($node)) {
      $lang = $node->language;
      $country_tid = $node->field_country['und'][0]['tid'];
      $args[0] = $country_tid;
      $global_tid = _get_global_tax_tid();
      if ($country_tid == $global_tid) {
        $args[0] = 'all';
      }
    }
    if (!isset($country_tid)) {
      global $user;
      $uid = $user->uid;
      $country_tid = $_SESSION['country'];
      if (!empty($country_tid)) {
        $args[0] = $country_tid;
        $global_tid = _get_global_tax_tid();
        if ($country_tid == $global_tid) {
          $args[0] = 'all';
        }
      }
    }
  }
  if ($view->name == 'tax' && ($display_id == 'term_reference_2'|| $display_id=='entityreference_1')) {
    $node = menu_get_object();
    if (isset($node)) {
      $lang = $node->language;
      $country_tid = $node->field_country['und'][0]['tid'];
      $args[0] = $country_tid;
    }
    if (!isset($country_tid)) {
      global $user;
      $uid = $user->uid;
      $country_tid = $_SESSION['country'];

      if (!empty($country_tid)) {
        $args[0] = $country_tid;
      }
    }

    // If the Workbench Access module is installed, honor its term permissions.
    if (function_exists('workbench_access_get_user_tree')) {
      if (variable_get('workbench_access') == 'taxonomy') {
        // Get vocabulary machine name from first term
        global $user;
        $workbench_access_allowed_tids = workbench_access_get_user_tree($user);
        $tids = '';
        $i = 0;
        foreach ($workbench_access_allowed_tids as $tid) {
          if (is_numeric($tid['access_id'])) {
            if ($i == 0)
              $tids = $tid['access_id'];
            else
              $tids = $tids . '+' . $tid['access_id'];
            $i++;
          }
        }
      }
    }
    $args[1] = $tids;
  }
  elseif(($view->name == 'workbench_recent_content' && $display_id == 'page_1') || ($view->name == 'all_recent_content' && $display_id == 'page')
	 || ($view->name == 'workbench_edited' && $display_id == 'page_1')) {
    // Change Section field lable name in "All recent content" filter form.
    $view->display['default']->handler->options['filters']['access_id']['expose']['label'] ='Categories';
  }
  if ($view->name == 'searchnew') {
    // If the Workbench Access module is installed, honor its term permissions.
    if (function_exists('workbench_access_get_user_tree')) {
      if (variable_get('workbench_access') == 'taxonomy') {
        // Get vocabulary machine name from first term
        global $user;
        $workbench_access_allowed_tids = workbench_access_get_user_tree($user);
        $tids = '';
        $i = 0;
        foreach ($workbench_access_allowed_tids as $tid) {
          if (is_numeric($tid['access_id'])) {
            if ($i == 0)
              $tids = $tid['access_id'];
            else
              $tids = $tids . '+' . $tid['access_id'];
            $i++;
          }
        }
      }
    }
    $args[0] = $tids;
  }
}

/**
 * hook_module_implements_alter
 */
function ge_filtering_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['ge_filtering'])) {
      $group = $implementations['ge_filtering'];
      unset($implementations['ge_filtering']);
      $implementations['ge_filtering'] = $group;
    }
  }
}

/**
 * Select the revisions which are not associated with any project
 */
function ge_filtering_exposed_project_form_submit(&$form, &$form_state) {
  if (isset($form_state['values']['field_projectname_target_id_entityreference_filter']) && $form_state['values']['field_projectname_target_id_entityreference_filter'] == t('empty')) {
    unset($form_state['values']['field_projectname_target_id_entityreference_filter_op']);
    $form_state['values']['field_projectname_target_id_entityreference_filter_op'] = t('empty');
  }
}

/**
 * Overrides hook_form_alter
 */
function ge_filtering_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $alerts_tid = variable_get('alert_news_type');
  $role = user_role_load_by_name('administrator');
  $rid = $role->rid;
  $content_types = array('tour_node_form','add_page_node_form', 'create_links_node_form', 'link_to_a_document_node_form', 'project_node_form', 'news_article_node_form', 'section_node_form', 'multisite_node_form','promote_link_in_search_node_form');
  $policy_content_types = array('add_page_node_form', 'create_links_node_form', 'link_to_a_document_node_form');
  /* to rest policy category when tagging is unchecked */
  if ($form_id != 'project_node_form' && in_array($form_id, $content_types)) {    
    if(in_array($form_id, $policy_content_types)) {
      array_unshift($form['#submit'], 'policy_submit_custom' );
	  foreach($form['field_policy_category']['und']['#options'] as $key => $value) {
        if($key != '_none') {
          $term = taxonomy_get_term_by_name($key, 'policy_and_procedure_categories');
          if ($term[key($term)]->language != 'en') {
            unset($form['field_policy_category']['und']['#options'][$key]);
          }
        }
      }
    }
    $form['options']['workbench_moderation_state_new']['#description'] = '<p style = "margin-top:0;">Draft -Save a version to preview or come back later to pick up where you left off</p>
      <p>Published - Publish your changes to make content available on OneHR</p>
      <p>Archive - Remove content from CMS, OneHR and Search. Archived content will be deleted permanently after 6 months.</p>';
    $form['revision_information']['workbench_moderation_state_new']['#description'] = '<p style = "margin-top:0;">Draft -Save a version to preview or come back later t\
o pick up where you left off</p>
      <p>Published - Publish your changes to make content available on OneHR</p>
      <p>Archive - Remove content from CMS, OneHR and Search. Archived content will be deleted permanently after 6 months.</p>';
    $selected_country_tid = $_SESSION['country'];
    $country = taxonomy_term_load($selected_country_tid);
    $settings = array();
    if(($country->field_publishing_options['und'][0]['value'] == 1) || $user->roles[$rid] == 'administrator') {
      show($form['revision_information']);
      $settings['country'] = $_SESSION['country'];
    }
	else {       
      hide($form['revision_information']);
    }
    // Hide Weight and revision fields form Section node form only
    if($form_id == 'section_node_form' && $user->roles[$rid] != 'administrator'){
      $form['#after_build'][] = 'hide_additional_settings';
	 // hide($form['weight']);
    }
	if($form_id == 'tour_node_form' && $user->roles[$rid] != 'administrator'){
      hide($form['weight']);
    }
    $form['#attached']['js'][] = drupal_get_path('module', 'ge_filtering') . '/js/ge_filtering.js';
    $form['field_projectname']['#access'] = FALSE;
    $form['field_top_menu']['#access'] = FALSE;
    
    if ($form_id == 'news_article_node_form') {
      show($form['revision_information']);
      hide($form['field_top_menu']);
	  if($user->roles[$rid] != 'administrator'){
        hide($form['weight']);
      }
      $count = $form['field_link_type_new']['und']['#max_delta'];
      for ($i = 0; $i <= $count; $i++) {
        hide($form['field_link_type_new']['und'][$i]['field_title']);
        hide($form['field_link_type_new']['und'][$i]['field_image']);
        hide($form['field_link_type_new']['und'][$i]['field_icon_name_text']);
        hide($form['field_link_type_new']['und'][$i]['field_icon_location_values']);	
      }
	  // Hide publishing date all roles except the administrator
	 if($user->roles[$rid] != 'administrator'){
		hide($form['field_published_date']);
	  }	
      $settings['type'] = $user->roles[$rid];
      $settings['news_type'] = $alerts_tid;
    }
    drupal_add_js(array('ge_filtering' => $settings), 'setting');
  }
  // To hide Add another item button of section fieldset on section CT
  if($form_id == 'section_node_form') {
    $field_language = $form['field_section']['#language'];
    $form['field_section'][$field_language]['add_more']['#access'] = FALSE;
  }
  if (isset($form['#node_edit_form'])) {
    $nid = $form['nid']['#value'];
    if (is_null($nid)) {
      if (in_array($form_id, $content_types)) {
        global $user;
        $uid = $user->uid;
        $country_tid = $_SESSION['country'];
        if (!empty($country_tid)) {
          $args[0] = $country_tid;
          $form['field_country']['und']['#default_value'] = $country_tid;
          $form['field_country']['#access'] = FALSE;
          if ($form['#node']->language == 'und') {
            $term = taxonomy_term_load($country_tid);
            $lang = taxonomy_term_load($term->field_default['und'][0]['tid']);
            $form['#node']->language = $lang->name;
          }		 		 
        }
        else {
          $form['field_country']['#access'] = FALSE;	
        }
      }
    }
    $node = $form['#node'];
    if (isset($node->nid)) {
      if (in_array($form_id, $content_types)) {
        $lang = $node->language;
        $field_country = $node->field_country['und'][0]['tid'];
        $form['field_country']['#access'] = FALSE;
        
      }
    }
  }
  elseif ($form_id == "views_form_projects_page_1") {
    $projects = get_projects_array();
    if (!isset($form['bundle_add_page']) && user_access('assign project') && !isset($form_state['input']['op'])) {
      $form['assigning_project'] = array(
        '#type' => 'fieldset',
      );
      $form['assigning_project']['project_selected'] = array(
        '#type' => 'select',
        '#title' => t('Assign Project'),
        '#options' => $projects,
        '#default_value' => 1,
      );
      $form['assigning_project']['assign_project'] = array(
        '#type' => 'button',
        '#value' => t('Assign Project'),
      );
    }
    $form['#after_build'][] = 'vbo_change_project';
  }
  elseif ($form['#id'] == "views-exposed-form-projects-page-1") {
    if (isset($form['field_projectname_target_id_entityreference_filter']['#options'])) {
      $form['field_projectname_target_id_entityreference_filter']['#options'] = array("empty" => t("- None -")) + $form['field_projectname_target_id_entityreference_filter']['#options'];
      if(empty($_REQUEST['field_country_tid_entityreference_filter']))
        $form['field_country_tid_entityreference_filter']['#value'] = $_SESSION['country'];
      array_unshift($form['#submit'], 'ge_filtering_exposed_project_form_submit');
      $form['#after_build'][] = 'state_change_role_based';
    }
  /*  //Rename the country drop down field value to country full names Projects page filter form
	$options['All'] = '-Any-';
	$existing_options = $form['field_country_tid_entityreference_filter']['#options'];
	$vocabulary = taxonomy_vocabulary_machine_name_load('country');// Load country vocabulay and get vid
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));  // the all terms of country vocabulary
	foreach($existing_options as $key=>$value){
		if(is_numeric($key)){
			$country_name = isset($terms[$key]->field_country_name[LANGUAGE_NONE][0]['value']) ? $terms[$key]->field_country_name[LANGUAGE_NONE][0]['value'] :$terms[$key]->name;
			$options[$key] = $country_name;
		}
	}
	$form['field_country_tid_entityreference_filter']['#options'] = $options; */
  
  }
  elseif($form['#id'] == 'views-exposed-form-workbench-recent-content-page-1') {
    if(!in_array('super_user', $user->roles))
      unset($form['state']['#options']['archive']);

    if(empty($_REQUEST['field_country_tid']))
      $form['field_country_tid']['#value'] = $_SESSION['country'];
	  //Rename the country drop down field value to country full names in All Recent content filter form
	$options['All'] = '-Any-';
	$existing_options = $form['field_country_tid']['#options'];
	$vocabulary = taxonomy_vocabulary_machine_name_load('country');// Load country vocabulay and get vid
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));  // the all terms of country vocabulary
	foreach($existing_options as $key=>$value){
		if(is_numeric($key)){
			$country_name = isset($terms[$key]->field_country_name[LANGUAGE_NONE][0]['value']) ? $terms[$key]->field_country_name[LANGUAGE_NONE][0]['value'] :$terms[$key]->name;
			$options[$key] = $country_name;
		}
	}
	$form['field_country_tid']['#options'] = $options;
  
  }
  if ($form_id == 'views_exposed_form') {
    $view_name = $form_state['view']->name;
    if ($view_name == 'projects') {
      if (isset($form_state['input']['field_projectname_target_id_entityreference_filter'])) {
        $options = $form['field_projectname_target_id_entityreference_filter']['#options'];
        $project_id = $_GET['field_projectname_target_id_entityreference_filter'];
        if (isset($project_id) && !in_array($project_id, $options)) {
          unset($_GET['field_projectname_target_id_entityreference_filter']);
		}
        else {
          $form_state['input']['field_projectname_target_id_entityreference_filter']= $_GET['field_projectname_target_id_entityreference_filter'];
        }
      }
    }
	else if($view_name == 'workbench_edited' && $form['#id'] == 'views-exposed-form-workbench-edited-page-1'){
		//Rename the country drop down field value to country full names in My Edits filter form
		$country_options['All'] = '-Any-';
		$existing_country_options = $form['field_country_tid']['#options'];
		$vocabulary = taxonomy_vocabulary_machine_name_load('country');// Load country vocabulay and get vid
		$terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));  // the all terms of country vocabulary
		foreach($existing_country_options as $key=>$value){
			if(is_numeric($key)){
				$country_name = isset($terms[$key]->field_country_name[LANGUAGE_NONE][0]['value']) ? $terms[$key]->field_country_name[LANGUAGE_NONE][0]['value'] :$terms[$key]->name;
				$country_options[$key] = $country_name;
			}
		}
		$form['field_country_tid']['#options'] = $country_options;	
	}    
  }
  //===================== Remove Icon and Location for all but Admin
  if ($form_id == 'multisite_node_form') {
    if ($user->roles[$rid] != 'administrator') {
      $form['field_link_type_new']['und'][0]['field_icon_name_text']['#access'] = False;
      $form['field_link_type_new']['und'][0]['field_icon_location_values']['#access'] = False;
   }
  }
  //======== remove start date and end date from project page for all but admin
  if ($form_id == 'project_node_form') {
	if ($user->roles[$rid] != 'administrator') {
	  $form['field_start_date']['#access'] = FALSE;
	  $form['field_end_date']['#access'] = FALSE;
	}
  }
  // === Customize for the promote_link_in_search_node_form form set default menu.
  elseif($form_id == "promote_link_in_search_node_form"){
	if(empty($form['nid']['#value'])){
	  $options = $form['field_menu']['und']['#options'];
	  $selected_option = array_keys(array_slice($options, 1, 1, true));
	  $form['field_menu']['und']['#default_value'] = $selected_option;
	}
  }
}

function policy_submit_custom($form, &$form_state){
    if($form_state['values']['field_check_policy'][LANGUAGE_NONE][0]['value']===0){
  $form_state['values']['field_policy_category'][LANGUAGE_NONE][0]['tid'] = '';
  }
}
/**
 * After build function for project page to display correct
 * filter criteria role wise.
 */
function state_change_role_based($form, &$form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'ge_filtering') . '/js/ge_filtering.js';
  global $user;
  if (isset($_GET['state_1']) && $_GET['state_1'] != "All") {
    if (in_array('reviewer', $user->roles)) {
      if ($form['state_1']['#value'] == "All") {
        $form['state_1']['#value'] = 'needs_review';
      }
      else {
        $form['state_1']['#value'] = $form_state['values']['state_1'];
      }
    }
    elseif (in_array('editor', $user->roles)) {
      if ($form['state_1']['#value'] == "All") {
        $form['state_1']['#value'] = 'draft';
      }
      else {
        $form['state_1']['#value'] = $form_state['values']['state_1'];
      }
    }
    elseif (in_array('ge_publisher', $user->roles)) {
      if ($form['state_1']['#value'] == "All") {
        $form['state_1']['#value'] = 'ready_to_publish';
      }
      else {
        $form['state_1']['#value'] = $form_state['values']['state_1'];
      }
    }
  }
  return $form;
}

function ge_filtering_form_views_form_projects_page_1_alter(&$form, &$form_state, $form_id) {
  if (isset($form['select']['rules_component::rules_change_to_ready_to_publish'])) {
    $form['select']['rules_component::rules_change_to_ready_to_publish']['#weight'] = 5;
  }
  if (isset($form['select']['rules_component::rules_draft'])) {
    $form['select']['rules_component::rules_draft']['#weight'] = 1;
  }
  if (isset($form['select']['rules_component::rules_change_to_needs_review'])) {
    $form['select']['rules_component::rules_change_to_needs_review']['#weight'] = 3;
    $form['select']['rules_component::rules_change_to_needs_review']['#submit'][] = 'needs_review_mail';
  }
  if (isset($form['select']['rules_component::rules_needs_translation'])) {
    $form['select']['rules_component::rules_needs_translation']['#weight'] = 4;
  }
  if (isset($form['select']['rules_component::rules_change_to_ready_to_preview_'])) {
    $form['select']['rules_component::rules_change_to_ready_to_preview_']['#weight'] = 2;
  }
  if (isset($form['select']['rules_component::rules_change_to_publish'])) {
    $form['select']['rules_component::rules_change_to_publish']['#weight'] = 6;
  }
}

/**
 * After build function to autofill project values
 * while perform Assign project operation on project page
 */
function vbo_change_project($form, &$form_state) {
  if (isset($form_state['input']['op']) && $form_state['input']['op'] == "Change Project Name") {
    $form['#attached']['js'][] = drupal_get_path('module', 'ge_filtering') . '/js/ge_filtering.js';
    $form['parameter']['projectname']['settings']['projectname']['#value'] = $form_state['values']['project_selected'];
  }
  return $form;
}

/**
 * Overrides hook_menu_alter.
 */
function ge_filtering_menu_alter(&$items) {
  // Removing certain local navigation tabs that are either undesired or need to be custom relocated.
  // Set these tabs to MENU_CALLBACK, so they still register the path, but just don't show the tab:
  $items['admin/workbench/create']['type'] = MENU_CALLBACK;
  $items['admin/workbench/sections']['type'] = MENU_CALLBACK;
  $items['node/%node/draft']['title']='View new draft';
  $items['admin/workbench']['access callback'] = 'mycontent_page_hide';
  $items['node/%node/draft']['access callback'] = '_draft_page_hide'; 
  $items['node/%node/draft'][ 'access arguments'] = array(1);
  }
  
 
/**
 * This is for "draft" TAB hide/show with user roles.
 */
function _draft_page_hide($node) {
  if($node->type=='project'){
    return false;
	}
  if ($node->status!=1) {
    return false;
  }
  $flag=_ge_state_access_node_draft_view($node);
   return $flag;
}

/**
 * This is for "My Content" TAB hide/show with user roles.
 */
function mycontent_page_hide() {
  global $user;
  if (!in_array("editor", $user->roles) && (in_array("ge_publisher", $user->roles) || in_array("reviewer", $user->roles))) {
    return false;
  }
  else {
    return true;
  }
}

/**
 * Overrides hook_view_query_alter.
 */
function ge_filtering_views_query_alter(&$view, &$query) {
  global $user;
  if(($view->name == 'all_recent_content' && $view->current_display == 'page' && in_array('super_user', $user->roles)))
    $query->where[1]['conditions'][1]['value'][] = 'archive';
  elseif ($view->name == "projects" && $view->current_display == "page_1" && !isset($_GET['state_1'])) {
    if (in_array('reviewer', $user->roles)) {
      $query->where[1]['conditions'][] = array(
        'field' => 'workbench_moderation_node_history.state',
        'value' => array('needs_review'),
        'operator' => 'in',
      );
    }
    elseif (in_array('editor', $user->roles)) {
      $query->where[1]['conditions'][] = array(
        'field' => 'workbench_moderation_node_history.state',
        'value' => array('draft'),
        'operator' => 'in',
      );
    }
    elseif (in_array('ge_publisher', $user->roles)) {
      $query->where[1]['conditions'][] = array(
        'field' => 'workbench_moderation_node_history.state',
        'value' => array('ready_to_publish'),
        'operator' => 'in',
      );
    }
  }
}

function ge_filtering_user_login(&$edit, $account) {
  if (!in_array("editor", $account->roles) && (in_array("ge_publisher", $account->roles) || in_array("reviewer", $account->roles))) {
    $_GET['destination'] = 'admin/workbench/projects';
  }
  else {
    $_GET['destination'] = 'admin/workbench';
  }
}

/**
 * Projects array for displaying in project dropdown
 * in project page.
 */
function get_projects_array() {
  $open_term = taxonomy_get_term_by_name('open', 'project_status');
  $open_term_id = key($open_term);
  $projects_array = array();
  if (!empty($open_term_id)) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_project_status', 'status', 'n.nid=status.entity_id');
    $query->fields('n', array('nid', 'title'));
    $query->condition('n.type', 'project', '=');
    $query->condition('status.field_project_status_tid', $open_term_id, '=');
    $project = $query->execute();
    $projects = $project->fetchAll();
    $projects_array[0] = "Please Select";
    foreach ($projects as $value) {
      $projects_array[$value->nid] = $value->title;
    }
  }
  return $projects_array;
}

/* Get Global tid */

function _get_global_tax_tid() {
  $global_country_tid = variable_get('global_country_tid');
  if (empty($global_country_tid)) {
    $taxs = taxonomy_get_term_by_name('GBL', 'country');
    if (!empty($taxs)) {
      foreach ($taxs as $tax) {
        $global_country_tid = $tax->tid;
      }
    }
  }
  return $global_country_tid;
}

/**
 * will return html output of group
 */
function _get_node_html($node) {
  global $base_url;
  global $user;
  $output = '';
  if (!empty($node->field_function) && !empty($node->field_location) && !empty($node->field_business)) {
    $function = $node->field_function['und'][0]['taxonomy_term']->field_geid['und'][0]['value'];
    $location = $node->field_location['und'][0]['taxonomy_term']->field_geid['und'][0]['value'];
    $business = $node->field_business['und'][0]['taxonomy_term']->field_geid['und'][0]['value'];
    $country = $node->field_country['und'][0]['taxonomy_term']->name;
    if ($country == 'GBL' || empty($node->field_self_service_roles))
      $roles = 'GE_NO_ROLES_FOUND';
    else
      $roles = $node->field_self_service_roles['und'][0]['tid'];

    $language = $node->language;
    $url  = $base_url . '/content/jsonnode/' . $node->nid . '/' . '505' . '/' . $language;
    $data = array(
      'roles'      => $roles,
      'preview'    => true,
      'country'       => $country,
      'business' => $business,
      'function'      => $function,
      'location'=>$location,
    );
    $json = drupal_json_encode($data);
    $options = array(
      'method' => 'POST',
      'data' => $json,
      'timeout' => 15,
      'headers' => array('Content-Type' => 'application/json'),
    );
    $json_output = drupal_http_request($url, $options);
    if ($json_output->status_message == 'OK') {
      $result = json_decode($json_output->data);
      if ($result->node->page_design == 'block')
        $pageblockclass = 'blocked-modules';
      else
        $pageblockclass = 'block';
     
      $pageclass = $result->node->page_css_class_names;
      $output = '<div class="cms-eeview-content' . $pageblockclass . ' ' . $pageclass. '">';
      $output .= _get_node_content($node);
      if(!empty($node->field_group)) {
        $groups = $node->field_group['und'];
        $group_style = '';
        if(!empty($node->field_group_style))
          $group_style = $node->field_group_style['und'][0]['taxonomy_term']->name;
        $output .= createGroups($groups, $group_style, "node");
      }
      $output .= '</div>';
    }
  }

  return $output;
}

function createGroups($groups, $group_style, $id) {
  $output = '';
  switch($group_style) {
    case "Carousel":
      $output .= createGroupCarousel($groups, $group_style, $id);
    break;

    case "Tabbed":
      $output .= createGroupTabbed($groups, $group_style, $id);
    break;

    case "Accordion":
      $output .= createGroupAccordion($groups, $group_style, $id);
    break;

    case "Jump Navigation":
      $output .= createGroupJumpNavigation($groups, $group_style, $id);
    break;
  }

  return $output;
}

function createGroupJumpNavigation($groups, $id) {
  $output = '';
  $output .= '<div class="row-fluid">';
  $output .= '<ul class="unstyled">';
  foreach($groups as $index=>$item) {
    $group_id = 'group-' . $index;
    $output .= '<li>';
    $output .= '<a href="#' . $group_id . '">';
    $output .= $item->title;
    $output .= '</a>';
    $output .= '</li>';
  }
  $output .= '</ul>';
  $output .= '</div>';
  foreach($groups as $index=>$item) {
    $output .= '<div id="'. $group_id .'">';
    $output .= _get_group_content($item);
    $output .= '</div>';
  }

  return $output;
}

function createGroupTabbed($groups, $group_style, $id) {
  $output = '';
  $output .= '<div class="row-fluid">';
  $output .= '<div class="span12">';
  $output .= '<div class="almost-full-width-inside-block">';
  $output .= '<ul id="' . $id . '" class="cms-tab-header nav nav-tabs widget-nav-tabs border-ge-blue">';
  foreach($groups as $index => $item) {
    $group_content = field_collection_item_load($item);
    $group_id = 'group-' . $index;
    if($index == 0)
      $class = "active";
    $output .= '<li class = "' . $class . '">';
    $output .= '<a href="#' . $group_id . '" data-toggle="tab">';
    $output .= $group_content->field_title['und'][0]['value'];
    $output .= '</a>';
    $output .= '</li>';
  }
  $output .= '</ul>';
  $output .= '</div>';
  $output .= '<div class="cms-tab-content tab-content wide-contents almost-full-width-inside-block">';
  foreach($groups as $index => $item) {
    $group_content = field_collection_item_load($item);
    $group_id = 'group-' . $index;
    if($index == 0)
      $class = 'tab-pane active';
    else
      $class = 'tab-pane';
    $output .= '<div id="' . $group_id . '" class = "' . $class . '">';
    $output .= _get_group_content($group_content, $group_style);
    $output .= '</div>';
  }
  $output .= '</div>';
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

function createGroupAccordion($groups, $group_style, $id) {
  $output = '';
  $output .= '<div class="row-fluid">';
  $output .= '<div class="span12">';
  $output .= '<div class="accordion" id="' . $id .'">';
  foreach($groups as $index=>$item) {
    $group_id = 'group-' . $index;
    $output .= '<div class="accordion-group">';
    $output .= '<div class="accordion-heading">';
    $output .= '<a class="accordion-toggle" data-toggle="collapse" data-parent="#' . $id . ' " href="#' . $group_id . '">';
    $output .= '<i class="icon-ico_chevron_right_lg"/>';
    $output .= $item->title;
    $output .= '</a>';
    $output .= '</div>';
    $output .= '<div id="' . $group_id . '" class="accordion-body collapse">';
    $output .= '<div class="accordion-inner">';
    $output .= _get_group_content($item, $group_style);
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
  }
  $output .= '</div>';
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

function createGroupCarousel($groups, $group_style, $id) {
  $output = '';
  $output .= '<div class="row-fluid">';
  $output .= '<div class="span12">';
  $output .= '<section class="fill-container full-width header-carousel carousel slide portlet" id="' . $id . '">';
  $output .= '<div class="carousel-control-container" style="height: 184px;">';
  $output .= '<a class="carousel-control left" href="#' . $id . '" data-slide="prev">‹</a>';
  $output .= '<a class="carousel-control right" href="#' . $id . '" data-slide="next">›</a>';
  $output .= '</div>';
  $output .= '<div class="carousel-inner">';
  foreach ($groups as $index=> $item) {
    if ($index == 1)
      $class = 'item fill-container full hero active';
    else
      $class = 'item fill-container full hero';

    $output .= '<div>';
    $output .= '<div class="media">';
    $output .= '<img src = "' . $item->publicBaseURL . '"/>';
    $output .= '</div>';
    $output .= '<div class="mt-1em">';
    $output .= '<div class="caption">';
    $output .= '<p>';
    $output .= '<strong>';
    $output .= $item->title;
    $output .= '</strong>';
    $output .= '</p>';
    if ($item->body != '')
      $output .= $item->body;
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
  }
  $output .= '</div>';
  $output .= '</section>';
  $output .= '</div>';
  $output .= '</div>';
  
  return $output;																	 
}

function _get_group_content($group, $group_style) {
  $output = '';
  $group_class_names = ' ';
  if(!empty($group->field_css_class_names))
    $group_class_names = $group->field_css_class_names['und'][0]['value'];
  $output .= '<div class="row-fluid content-group ' . $group_class_names . '">';
  
  if(!empty($group->field_body) && !empty($group->body['und'][0]['summary']))
    $group_summary = $group->body['und'][0]['summary'];

  if(!empty($group->field_title) || !empty($group_summary)) {
    if(!empty($group->field_design_settings))
      $group_design = $group->field_design_settings['und'][0]['taxonomy_term']->name;

    if($group_design = 'Block')
      $class = 'group-title img-circles-bg';

    $output .= '<div class="group-title ' . $class . '">';
    if($group_style == 'Accordion' || $group_style == 'Tabbed') {
      if(!empty($group->field_title) && !empty($group_summary)) {        
        $output .= '<div class="tab-introduction">';
        $output .= '<div class="clearfix">';
        $output .= '<div class="span4 tab-introduction-title">';
        $output .= '<h3 class="title voice-brand">';
        $output .= $group->field_title['und'][0]['value'];
        $output .= '</h3>';
        $output .= '</div>';
        $output .= '<div class="span6 tab-introduction-description">';
        $output .= $group_summary;
        $output .= '</div>';
        $output .= '</div>';
        $output .= '</div>';
      }
      elseif(!empty($group->field_title)) {
        $output .= '<h3 class="title voice-brand">';
        $output .= $group->field_title['und'][0]['value'];
        $output .= '</h3>';
      }
      else {
        $output .= '<h3 class="title voice-brand">';
        $output .= $group_summary;
        $output .= '</h3>';
      }
    }
    else {
      $output .= '<h3 class="title voice-brand">';
      $output .= $group_summary;
      $output .= '</h3>';
      if ($group_design == 'Block') {
        $output .= '<a href="#">';
        $output .= '<i class="icon-ico_chevron_down_lg"/>';
        $output .= '</a>';
      }
    }
    $output .= '</div>';
  }
  $output .= '<div class="row-fluid">';
  if($group_design == 'Block' && (!empty($group_summary) || !empty($group->field_body) || count($group->field_section) > 0 || !empty($group->field_body_image)))
    $groupblockclass = 'span12 block hide-info';

  $output .= '<div class = "' . $groupblockclass . '">';
  if(!empty($group_summary) && $group_style != 'Accordion' && $group_style != 'Tabbed') {    
    $output .= '<div class="well summary">';
    $output .= $group_summary;
    $output .= '</div>';
  }
  $imageAlign = (!empty($group->field_body_image_alignment))? $group->image_alignment['und'][0]['taxonomy_term']->name : '';
  $imageType = (!empty($group->field_body_image_type)) ? $group->field_body_image_type['und'][0]['taxonomy_term']->name : '';
  if($imageAlign == 'top' || $imageAlign = '') {
    if(!empty($group->field_body_image)) {
      $output .= '<div class="media">';
      $image_path = file_create_url($group->field_body_image['und'][0]['uri']);
      $output .= '<img src = "' . $image_path . '"/>';
      $output .= '</div>';
    }
    $output .= $group->field_body['und'][0]['value'];
  }
  if($group->imageType == 'small') {
    $imageBlock = 'span3';
    $contentBlock = 'span9';
  }
  elseif($group->imageType == 'medium') {
    $imageBlock = 'span4';
    $contnetBlock = 'span8';
  }
  elseif($group->imageType == 'large') {
    $imageBlock = 'span6';
    $contentBlock = 'span6';
  }
  elseif($group->imageType == 'extralarge') {
    $imageBlock = 'span8';
    $contentBlock = 'span4';
  }
  if($group->imageAlign == 'left') {
    $output .= '<div class = "row-fluid">';
    $output .= '<div class = "' . $imageBlock . '">';
    $output .= '<div class="media">';
    $image_path = file_create_url($node->field_body_image['und'][0]['uri']);
    $output .= '<img src = "' . $image_path . '"/>';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '<div class = "' . $contentBlock . '">';
    $output .= $group->field_body['und'][0]['value'];
    $output .= '</div>';
    $output .= '</div>';
  }
  if($group->imageAlign == 'right') {
    $output .= '<div class="row-fluid">';
    $output .= '<div class="' . $contentBlock . '">';
    $output .= $group->field_body['und'][0]['value'];
    $output .= '</div>';
    $output .= '<div class="' . $imageBlock . '">';
    $output .= '<div class="media">';
    $image_path = file_create_url($node->field_body_image['und'][0]['uri']);
    $output .= '<img src="' . $image_path . '"/>';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
  }
  if(!empty($group->field_section)) {
    $output .= '<div class="row-fluid">';
    if(!empty($group->field_section_type))
      $term = taxonomy_term_load($group->field_section_type['und'][0]['tid']);
    $output .= createSections($group->field_section['und'], $term->name, 'section');
    $output .= '</div>';
  }
  $output .= '</div>';													           
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

function createSections($section, $section_style, $id) {
  $output = '';

  switch($section_style) {
    case 'Carousel':
      $output .= createSectionCarousel($section, $section_style, $id);
      break;

    case 'Tabbed':
      $output .= createSectionTabbed($section, $section_style, $id);
      break;

    case 'Accordion':
      $output .= createSectionAccordion($section, $section_style, $id);
      break;
  }

  return $output;
}

function createSectionCarousel($section, $section_style, $id) {
  $output = '';
 
  $output .= '<section class="fill-container full-width header-carousel carousel slide portlet" id="' . $id . '">';
  $output .= '<div class="carousel-control-container" style="height: 184px;">';
  $output .= '<a class="carousel-control left" href="#' . $id . '" data-slide="prev">‹</a>';
  $output .= '<a class="carousel-control right" href="#' . $id . '" data-slide="next">›</a>';
  $output .= '</div>';
  $output .= '<div class="carousel-inner">';
  foreach($sections as $index=>$item) {
    if($index == 0)
      $output .= '<div class = "item fill-container full hero active">';
    else
      $output .= '<div class = "item fill-container full hero">';

    $output .= '<div class="media">';
    $output .= '<img src = "' . $section->publicBaseURL . '"/>';
    $output .= '</div>';
    $output .= '<div class="mt-1em">';
    $output .= '<div class="caption">';
    $output .= '<p>';
    $output .= '<strong>';
    $output .= $section->title;
    $output .= '</strong>';
    $output .= '</p>';
    if (!empty($section->body))
      $output .= $section->body;
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
  }
  $output .= '</div>';
  $output .= '</section>';

  return $output;
}

function createSectionTabbed($section, $section_style, $id) {
  $output = '';
  $output .= '<div class="almost-full-width-inside-block">';
  $output .= '<ul id="' . $id . '" class="cms-tab-header nav nav-tabs widget-nav-tabs border-ge-blue">';
  foreach($sections as $index=>$item) {
    $section_id = 'section-' . $index;
    if($index == 0)
      $output .= '<li class = "active">';
    else
      $output .= '</li>';

    $output .= '<a href="#' . $section_id . '" data-toggle="tab">';
    $output .= $section->title;
    $output .= '</a>';
    $output .= '</li>';
  }
  $output .= '</ul>';
  $output .= '</div>';

  $output .= '<div class="almost-full-width-inside-block cms-tab-content tab-content wide-contents">';
  foreach($sections as $index=>$item) {
    $section_id = 'section-' . $index;
    if($index == 0)
      $class = 'tab-pane active';
    else
      $class = 'tab-pane';
    $output .= '<div id="' . $section_id . '" class="' . $class . '" >';
    $output .= _get_section_content($item, $section_style);
    $output .= '</div>';
  }
  $output .= '</div>';

  return $output;
}

function createSectionAccordion($section, $section_style, $id) {
  $output = '';  
  $output .= '<div class="accordion" id="' . $id . '">';
  foreach($section as $index=>$item) {
    $section_content = field_collection_item_load($item);
    $section_id = 'section-' . $index;
    $output .= '<div class="accordion-group">';
    $output .= '<div class="accordion-heading">';
    $output .= '<a class="accordion-toggle" data-toggle="collapse" data-parent="#' . $id . '" href="#' . $section_id . '">';
    $output .= '<i class="icon-ico_chevron_right_lg"/>';
    $output .= $section_content->field_title['und'][0]['value'];
    $output .= '</a>';
    $output .= '</div>';
    $output .= '<div id="' . $section_id . '" class="accordion-body collapse">';
    $output .= '<div class="accordion-inner">';
    $output .= _get_section_content($section_content, $section_style);
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
  }
  $output .= '</div>';

  return $output;
}

function _get_section_content($section, $section_style) {
  $output = '';
  if(!empty($section->field_section_layout))
    $section_layout = taxonomy_term_load($section->field_section_layout['und'][0]['tid']);

  if($section_layout->name == 'full_row' || $section_layout->name == 'Span 12')
    $class = 'content-section span12';
  elseif($section_layout->name == 'two column' || $section_layout->name == 'Span 8')
    $class = 'content-section span8';
  elseif($section_layout->name == 'Span 6')
    $class = 'content-section span6';
  elseif($section_layout->name == 'one column' || $section_layout->name == 'Span 4')
    $class = 'content-section span4';
  elseif($section_layout->name == 'Span 3')
    $class = 'content-section span3';
  else
    $class = 'content-section span12';
 
  if(!empty($section->field_body))
    $section_summary = $section->field_body['und'][0]['summary'];
  $output .= '<div class="' . $class . '">';
  $section_design = (!empty($section->field_design_settings))?$section->field_design_settings['und'][0]['taxonomy_term']->name: '';
  if(!empty($section->field_title) || !empty($section_summary)) {
    if($section_design == 'Block')
      $class = 'section-title img-circles-bg';
    $output .= '<div class="section-title ' . $class . '">';
    if($section_style == 'Accordion' || $section_style == 'Tabbed') {
      if(!empty($section->field_title) && !empty($section_summary)) {
        $output .= '<div class="tab-introduction">';
        $output .= '<div class="clearfix">';
        $output .= '<div class="span4 tab-introduction-title">';
        $output .= '<h3 class="title voice-brand">';
        $output .= $section->field_title['und'][0]['value'];
        $output .= '</h3>';
        $output .= '</div>';
        $output .= '<div class="span6 tab-introduction-description">';
        $output .= $section_summary;
        $output .= '</div>';
        $output .= '</div>';
        $output .= '</div>';
      }
      elseif(!empty($section->field_title)) {
        $output .= '<h3 class="title voice-brand">';
        $output .= $section->field_title['und'][0]['value'];
        $output .= '</h3>';
      }
      else {
        $output .= '<h3 class="title voice-brand">';
        $output .= $section_summary;
        $output .= '<h3>';
      }
    }
    else {
      $output .= '<h3 class="title voice-brand">';
      $output .= $section->field_title['und'][0]['value'];
      $output .= '</h3>';
      if($section_design == 'Block') {
        $output .= '<a href="#">';
        $output .= '<i class="icon-ico_chevron_down_lg"/>';
        $output .= '</a>';
      }
    }
    $output .= '</div>';
  }
  elseif(!empty($section_summary) && $section_design != 'ACCORDION' && $section_design != 'TAB') {
    $output .= '<div class="well summary">';
    $output .= $section_summary;
    $output .= '</div>';
  }

  if($section_design == 'Block' && (!empty($section->summary) || !empty($section->field_body) 
    || !empty($section->field_body_image) || !empty($section->field_link_type_new)))
    $sectionblockclass = 'block hide-info';

  $sectionDrupalClass = (!empty($section->field_css_class_names))?$section->section_css_class_names['und'][0]['value']: ' ';
  $class = $sectionblockclass . $sectionDrupalClass;
  
  $output .= '<div class ="' . $class . '" >';
  $imageAlign = $section->image_alignment;
  $imageType = $section->image_type;
  if($imageAlign == 'top' || !empty($section->image_type)) {
    if(!empty($section->image)) {
      $output .= '<div class="media">';
      $output .= '<img src = "' . $section->publicBaseURL . '">';
      $output .= '</div>';
    }
    elseif(!empty($section->body))
      $output .= $section->body;
  }
  if($section->imageType == 'small') {
    $imageBlock = 'span3';
    $contentBlock = 'span9';
  }
  elseif($section->imageType == 'medium') {
    $imageBlock = 'span4';
    $contentBlock = 'span8';
  }
  elseif($section->imageType == 'large') {
    $imageBlock = 'span6';
    $contentBlock = 'span6';
  }
  elseif($section->imageType == 'extralarge') {
    $imageBlock = 'span8';
    $contentBlock = 'span4';
  }

  if($section->imageAlign == 'left') {
    $output .= '<div class = "row-fluid">';
    $output .= '<div class = "' . $imageBlock . '">';
    $output .= '<div class = "media">';
    $output .= '<img src = "' . $section->publicBaseURL . '"/>';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '<div class = "' . $contentBlock . '">';
    $output .= $section->body;
    $output .= '</idv>';
    $output .= '</div>';
  }

  if($section->imageAlign == 'right') {
    $output .= '<div class = "row-fluid">';
    $output .= '<div class = "' . $contentBlock .'">';
    $output .= $section->body;
    $output .= '</div>';
    $output .= '<div class = "' . $imageBlock . '">';
    $output .= '<div class = "media">';
    $output .= '<img src = "' . $section->publicBaseURL . '"/>';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
  }

  if(count($section->section_link_files) > 0) {
    $output .= '<ul class = "unstyled">';
    $output .= createSectionsLinks($section->section_link_files, $section->link_style, 'link');
    $output .= '</ul>';
  }   
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

function createSectionsLinks($linkfiles, $style, $id) {
  $output = '';
  if($style == "CAROUSEL")
    $output .= createSectionLinksCarousel($linkfiles, $style, 'link-carousel');
  elseif($style == "TAB")
    $output .= createSectionLinksTabbed($linkfiles, $style, 'link-tabbed');
  elseif($style == "ACCORDION")
    $output .= createSectionLinksAccordion($linkfiles, $style, 'link-accordion');
  else
    $output .= '';

  return $output;
}

function createSectionLinksAccordion($linkfiles, $style, $id) {
  $output = '';
  $output .= '<div class="accordion" id="' . $id . '">';
  foreach($linkfiles as $index=>$item) {
    $link_id = "link-" . $index;
    $output .= '<div class="accordion-group">';
    $output .= '<div class="accordion-heading">';
    $output .= '<a class="accordion-toggle" data-toggle="collapse" data-parent="#' . $id . '" href="#' . $link_id . '">';
    $output .= '<i class="icon-ico_chevron_right_lg"/>';
    $output .= $item->title;
    $output .= '</a>';
    $output .= '</div>';
    $output .= '<div id="' . $link_id . '" class="accordion-body collapse">';
    $output .= '<div class="accordion-inner">';
    $output .= $item->description;
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
  }
  $output .= '</div>';
  
  return $output;
}

function createSectionLinksTabbed($linkfiles, $style, $id) {
  $output = '';
  $output .= '<div class="almost-full-width-inside-block">';
  $output .= '<ul id="' . $id . '" class="nav nav-tabs widget-nav-tabs border-ge-blue">';
  foreach($linkfiles as $index=>$item) {
    $link_id = 'link-' . $index;
    if($index == 0)
      $class = 'active';

    $output .= '<li>';    
    $output .= '<a href="#' . $link_id . '" data-toggle="tab">';
    $output .= $section->title;
    $output .= '</a>';
    $output .= '</li>';
  }
  $output .= '</ul>';
  $output .= '</div>';
  $output .= '<div class="tab-content wide-contents">';
  foreach($linkfiles as $index=>$item) {
    $link_id = 'link-' . $index;
    if($index == 0)
      $class = 'tab-pane active';
    else
      $class = 'tab-pane';
    $output .= '<div id="' . $link_id . '" class = "' . $class . '">';
    $output .= $item->description;
    $output .= '</div>';
  }
  $output .= '</div>';
  return $output;
}

function createSectionLinksCarousel($linkfiles, $style, $id) {
  $output = '';
  $output .= '<section class="fill-container full-width header-carousel carousel slide portlet" id="' . $id . '">';
  $output .= '<div class="carousel-control-container" style="height: 184px;">';
  $output .= '<a class="carousel-control left" href="#' . $id . '" data-slide="prev">‹</a>';
  $output .= '<a class="carousel-control right" href="#' . $id . '" data-slide="next">›</a>';
  $output .= '</div>';
  $output .= '<div class="carousel-inner">';
  foreach($linkfiles as $index=>$item) {
    if($index == 0)
      $class = 'item fill-container full hero active';
    else
      $class = 'item fill-container full hero';
    $output .= '<div class="media">';
    $output .= '<img src = "' . $publicBaseURL . '" />';
    $output .= '</div>';
    $output .= '<div class="mt-1em">';
    $output .= '<div class="caption">';
    $output .= '<p>';
    $output .= '<strong>';
    $output .= $item->title;
    $output .= '</strong>';
    $output .= '</p>';
    if(!empty($item->description))
      $output .= $item->description;
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
  }
  $output .= '</div>';
  $output .= '</section>';
  
  return $output;
}

function section_links_files($link) {
  $output = '';
  $output .= '<li>';
  if($link->type == 'files') {
    if(strpos($link->file,'private') !== false) 
      $href = $privateBaseURL;
    elseif(strpos($link->file,'public') !== false)
      $href = $publicBaseURL;
    else
      $href = $link->file;

    if($link->window_type == "Open this url in a new window")
      $target = "_new";
    elseif($link->window_type == "Open this url in a same window")
      $target = 'top';
    else
      $target = '_new';
  }
  elseif($link->type == 'link') {
    $href = $link->url;
    if($link->window_type == 'Open this url in a new window')
      $target = '_new';
    elseif($link->window_type == 'Open this url in a same window')
      $target = 'top';
    else
      $target = '_new';
  }
  elseif($link->type == 'existing_url') {
    $href = '/eeview/node/' . $link->nid;
  }
  if($link->window_type == "Open this url in a new window") {
    $target = "_new";
  }
  $output .= '<a class="btn btn-link" target = "' . $target . '" href = "' . $href . '">';
  if(!empty($item->icon_name) && (empty($item->icon_location) || $item->icon_location == 'left'))
    $output .= '<i class="' . $item->icon_name . '"/>';
  $output .= $link->title;
  if(!empty($item->icon_name) && $item->icon_location == 'right')
    $output .= '<i class="' . $item->icon_name . '"/>';
  $output .= '</a>';
  $output .= '</li>';

  return $output;
}

function _get_node_content($node) {
  $output = '';
  if(!empty($node->field_image_banner)) {
    $output .= '<div class="row-fluid content-banner">';
    $output .= '<div class="news-story-banner">';
    $image_path = file_create_url($node->field_image_banner['und'][0]['uri']);
    $output .= '<img src = "' . $image_path . '" alt = "' . $node->title . '"/>';
    $output .= '</div>';
    $output .= '</div>';
  }
  $output .= '<div class="row-fluid content-body ">';
  if(!empty($node->field_design_settings) && $node->field_design_settings['und'][0]['taxonomy_term']->name == 'block')
    $class = 'img-circles-bg';
  $output .= '<div class = "' . $class . '"';
  $output .= '<h2 class="title voice-brand">';
  $output .= $node->title;
  $output .= '</h2>';
  $output .= '<div class="row-fluid">';
  if(!empty($node->body) && !empty($node->body['und'][0]['summary'])) {
    $output .= '<div class="span12 block">';
    $output .= '<div class="well summary">';
    $output .= $node->body['und'][0]['summary'];
    $output .= '</div>';
    $output .= '</div>';
  }
 
  $imageAlign = $imageType = '';
  if(!empty($node->field_body_image_alignment))
    $imageAlign = $node->field_body_image_alignment['und'][0]['taxonomy_term']->name;
  if(!empty($node->field_body_image_type))
    $imageType = $node->field_body_image_type['und'][0]['taxonomy_term']->name;;

  if(!empty($node->field_body_image))
    $body_image_path = file_create_url($node->field_body_image['und'][0]['uri']);

  if($imageAlign == "top" || $imageAlign == '' && !empty($node->field_body_image)) {
    $output .= '<div class="media">';
    $output .= '<img src = "' . $body_image_path . '"/>';
    $output .= '</div>';
  }

  if(!empty($node->body)) {
    $output .= '<div class="row-fluid">';
    $output .= '<div class="span12">';
    if($page_design == 'block')
      $class = 'span12 block';
    $output .= $node->body['und'][0]['value'];
    $output .= '</div>';
    $output .= '</div>';
  }

  if($imageType == "small") {
    $imageBlock = 'span3';
    $contentBlock = 'span9';
  }
  elseif($imageType == "medium") {
    $imageBlock = 'span4';
    $contentBlock = 'span8';
  }
  elseif($imageType == "large") {
    $imageBlock = 'span6';
    $contentBlock = 'span6';
  }
  elseif($imageType == "extralarge") {
    $imageBlock = 'span8';
    $contentBlock = 'span4';
  }

  if ($imageAlign == 'left') {
    $output .= '<div class="row-fluid">';
    $output .= '<div class = "' . $imageBlock . '">';
    $output .= '<div class="media">';
    $output .= '<img src = "' . $body_image_path . '"/>';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '<div class = "' . $contentBlock . '">';
    $output .= $node->body;
    $output .= '</div>';
    $output .= '</div>';
  }
  if($imageAlign == 'right') {
    $output .= '<div class="row-fluid">';
    $output .= '<div class = "' . $contentBlock . '">';
    $output .= $node->body;
    $output .= '</div>';
    $output .= '<div class = "' . $imageBlock . '">';
    $output .= '<div class="media">';
    $output .= '<img src = "' . $body_image_path . '"/>';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
  }
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * hook_field_formatter_view().
 
function ge_filtering_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $items = array_reverse($items, TRUE);
  $header = ge_filtering_field_header($settings['columns']);
  $table_id = check_plain("extended-file-field-table-" . str_replace('_', '-', $field['field_name']));
  $table = ge_filtering_field_generate_table($header, $rows['visible'], $table_id);
  $elements[] = $table;
  return $elements;
  }*/

function ge_filtering_field_generate_table($header, $rows, $table_id) {
  $table = array(
		 '#theme' => 'table',
		 '#sticky' => FALSE,
		 '#header' => $header,
		 '#rows' => $rows,
		 '#attributes' => array(
					'id' => $table_id,
					),
		 );
  return $table;
}

function ge_filtering_field_header () {
  $header = array(
				  'fid' => array(
						 'title' => t('File ID'),
						 'sort' => 'numeric',
						 ),
				  'filename' => array(
						      'title' => t('File'),
						      'sort' => 'string',
						      ),
				  'description' => array(
							 'title' => t('Description'),
							 'sort' => 'string',
							 ),
				  'extension' => array(
						       'title' => t('Extension'),
						       'sort' => 'string',
						       ),
				  'filesize' => array(
						      'title' => t('Size'),
						      'sort' => 'numeric',
						      ),
				  'timestamp' => array(
						       'title' => t('Created'),
						       'sort' => 'numeric',
						       ),
				  'uid' => array(
						 'title' => t('Author'),
						 'sort' => 'numeric',
						 ),
				  'uri' => array(
						 'title' => t('URI'),
						 'sort' => 'string',
						 ),
				  'filemime' => array(
						      'title' => t('Mime Type'),
						      'sort' => 'string',
						      ),
				  'display' => array(
						     'title' => t('File Display'),
						     'sort' => FALSE,
						     ),
				  'status' => array(
						    'title' => t('File Status'),
						    'sort' => FALSE,
						    ),
				  );
  return $header; 
}

/*
 * Implements hook_field_widget_form_alter().
 */
function ge_filtering_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($element['#bundle'] == "field_section" && $element['#field_name'] == "field_section") {
    if($context['form']['type']['#value'] == "section")
      //Hide Remove button from section fieldcollection on sidebar
      $element['remove_button']['#access'] = FALSE;
  }
   else if ((($context['field']['field_name'] == 'field_file')|| ($context['field']['field_name'] == 'field_asset')) && $context['instance']['widget']['type'] == 'file_generic') {
     $element_children = element_children($element, TRUE);
    foreach($element_children as $key) {
      $element[$key]['#process'][] = 'ge_filtering_file_field_description_required';
	  $element[$key]['#element_validate'] = array('_accesible_file_validate');
    }
  } 
  }


/**
 * Require description to be set.
 */
function ge_filtering_file_field_description_required($element, &$form_state, $form) {
  $element['description']['#required'] = TRUE;
  return $element;
}

/**
 * Element validate function for file field.
 */
function _accesible_file_validate($element, &$form_state, $form) {
	 // Only do validation if the function is triggered from other places than
    if (!in_array('file_managed_file_submit', $form_state['triggering_element']['#submit'])) {
		// If the file not uploaded there, we do not check for empty values.
		$parents = $element['#parents'];
		$field = array_pop($parents);
		$file_field = drupal_array_get_nested_value($form_state['input'], $parents);
		$field_name = implode("][",$parents);
		$field_name = $field_name.']';
		foreach($file_field as $key => $filedes){			   
		   if(!empty($filedes['fid'])){
				if(empty($filedes['description'])){				
				 form_set_error($field_name.'['.$key, t('File title is mandatory for the uploaded file.'));			
				 return;				
			}
		}		
	}    
  }
 }
 
/**
 * After build function to hide additional settings vertical tab
 */
function hide_additional_settings($form, &$form_state) {
  foreach($form['additional_settings']['group']['#groups']['additional_settings'] as $key => $form_element) {
    //If form elment type is fieldset && title == Weight, hide the tab
    if($form_element['#type'] == 'fieldset' && $form_element['#title'] == 'Weight') {
      unset($form['additional_settings']['group']['#groups']['additional_settings'][$key]);
    }
  }
  return $form;
}

/**
 * Implements hook_views_pre_render
 */
function ge_filtering_views_pre_render(&$view){
	if(($view->name == 'workbench_recent_content' || $view->name == 'all_recent_content') && ($view->current_display == 'page' || $view->current_display == 'page_1' || $view->current_display == 'block_1')){
		drupal_add_js(drupal_get_path('module', 'ge_filtering') . '/js/ge_filtering.js');
	}
	else if($view->name == 'workbench_edited' && ($view->current_display == 'page_1' || $view->current_display == 'block_1')){
		drupal_add_js(drupal_get_path('module', 'ge_filtering') . '/js/ge_filtering.js');
	}
	else if($view->name == 'newsarticle' && ($view->current_display == 'page' || $view->current_display == 'block')){
		drupal_add_js(drupal_get_path('module', 'ge_filtering') . '/js/ge_filtering.js');
	}else if($view->name == 'userlist' && ($view->current_display == 'page')){  // implement the country full name in the user list page result
		foreach($view->result as $results){
			foreach($results->field_field_country as $i=>$country_result){
				$country_full_name = isset($results->field_field_country[$i]['raw']['taxonomy_term']->field_country_name[LANGUAGE_NONE][0]['value']) ? $results->field_field_country[$i]['raw']['taxonomy_term']->field_country_name[LANGUAGE_NONE][0]['value'] : $results->field_field_country[$i]['rendered']['#markup'];
				$results->field_field_country[$i]['rendered']['#markup']  = $country_full_name;
			}
		
		}
	}
}
