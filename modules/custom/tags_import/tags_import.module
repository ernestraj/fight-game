<?php

/**
 * 
 */
function tags_import_menu() {
  $items = array();

  $items['tags-import'] = array(
    'title' => 'Tags Import',
    'page callback' => 'node_tags_import',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['bfl-import'] = array(
    'title' => 'BFL Import',
    'page callback' => 'node_bfl_import',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function node_tags_import() {
  $form = drupal_get_form('_node_tags_import');

  return $form;
}

function _node_tags_import($form, &$form_state) {
  $form = array();  

  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Tags CSV File'),
    '#description' => t('Upload a file, allowed extensions: csv'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function _node_tags_import_validate($form, &$form_state) {
  $file = file_save_upload('file', array('file_validate_extensions' => array('csv')), 'public://', FILE_EXISTS_REPLACE);
  // If the file passed validation:
  if ($file) {
    // Move the file into the Drupal file system.
    if ($file = file_move($file, 'public://')) {
      // Save the file for use in the submit handler.
      $form_state['storage']['file'] = $file;
    }
    else {
      form_set_error('file', t("Failed to write the uploaded file to the site's file folder."));
    }
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
}

function _node_tags_import_submit($form, &$form_state) {
  $handle = fopen($form_state['storage']['file']->uri, 'r');
  while ($row = fgetcsv($handle)) {
    if(is_numeric($row[1])) {
      $operations[] = array('node_tags_import_batch', array($row[1], $row[2]));
    }
  }
  $batch = array(
    'title' => t('Tags Import'),
    'operations' => $operations,
    'finished' => 'tags_import_finished_callback',
  );
  batch_set($batch);
  // Only needed if not inside a form _submit handler.
  // Setting redirect in batch_process.
  batch_process('tags-import');

  fclose($handle);
}

function node_tags_import_batch($nid, $tags, &$context) {
  $node = node_load($nid);
  if (!empty($node)) {
    $tags = rtrim($tags, ',');
    $tags = rtrim($tags, ' ,');
    $tags_arr = explode(',', $tags);
    if(!empty($node->field_tags))
      $count = count($node->field_tags['und']);
    else
      $count = 0;
    foreach($tags_arr as $key=>$item) {
      $index = $count + $key;
      $term = _check_taxonomy_term_name(trim($item, ' '), 1);
      if(!empty($term))
        $tid = $term[0]->tid;
      else {
        $term = new stdClass();
        $term->name = trim($item, ' ');
        $term->vid = 1;
        taxonomy_term_save($term);
        $tid = $term->tid;
      }
      $node->field_tags['und'][$index]['tid'] = $tid;
    }
    $context['results'][] = $node->nid . ' : ' . check_plain($node->title);
    $context['message'] = check_plain($node->title);
    node_save($node);
  }
}

function tags_import_finished_callback($success, $results, $operations) {
  // The 'success' parameter means no fatal PHP errors were detected. All
  // other error management should be handled using 'results'.
  if ($success) {
    $message = format_plural(count($results), 'One post processed.', '@count posts processed.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
  // Providing data for the redirected page is done through $_SESSION.
  foreach ($results as $result) {
    $items[] = t('Tags Imported for node %title.', array('%title' => $result));
  }
  $_SESSION['my_batch_results'] = $items;
}

function _check_taxonomy_term_name($name, $vid) {
  $query = db_select('taxonomy_term_data', 'terms')
    ->fields('terms', array('name', 'tid'))
    ->condition('vid', $vid)
    ->condition('name', $name);
  $result = $query->execute()->fetchAll();

  return $result;
}

function node_bfl_import() {
  $form = drupal_get_form('_node_bfl_import');

  return $form;
}

function _node_bfl_import($form, &$form_state) {
  $form = array();  

  $form['nodes-file'] = array(
    '#type' => 'file',
    '#title' => t('Nodes update file'),
    '#description' => t('Upload a file, allowed extensions: csv'),
  );

  $form['roles-file'] = array(
    '#type' => 'file',
    '#title' => t('CMS Roles update file'),
    '#description' => t('Upload a file, allowed extensions: csv'),
  );

  $form['create-queue'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Create Queue from Fresh'),
    '#options' => array('1' => 'Yes'),
    '#description' => t('Upload a file, allowed extensions: csv'),
  );

  $form['number-of-items'] = array(
    '#type' => 'select',
    '#title' => t('Number of Items to process at a time'),
    '#options' => array(1=>1, 100 => 100, 200 => 200, 500 => 500, 1000 => 1000),
    '#description' => t('Choose content Type information to be imported'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function _node_bfl_import_validate($form, &$form_state) {
  if($form_state['values']['create-queue'][1] == 1) {
    $nodes_file = file_save_upload('nodes-file', array('file_validate_extensions' => array('csv')), 'public://', FILE_EXISTS_REPLACE);
    // If the file passed validation:
    if ($nodes_file) {
      // Move the file into the Drupal file system.
      if ($nodes_file = file_move($nodes_file, 'public://')) {
        // Save the file for use in the submit handler.
        $form_state['storage']['nodes_file'] = $nodes_file;
      }
      else {
        form_set_error('nodes_file', t("Failed to write the uploaded file to the site's file folder."));
      }
    }
    else {
      form_set_error('nodes_file', t('No file was uploaded.'));
    }
  }

  $roles_file = file_save_upload('roles-file', array('file_validate_extensions' => array('csv')), 'public://', FILE_EXISTS_REPLACE);
  if ($roles_file) {
    // Move the file into the Drupal file system.
    if ($roles_file = file_move($roles_file, 'public://')) {
      // Save the file for use in the submit handler.
      $form_state['storage']['roles_file'] = $roles_file;
    }
    else {
      form_set_error('roles_file', t("Failed to write the uploaded file to the site's file folder."));
    }
  }
  else {
    form_set_error('roles_file', t('No file was uploaded.'));
  }
}

function _node_bfl_import_submit($form, &$form_state) {
  $roles_handle = fopen($form_state['storage']['roles_file']->uri, 'r');
  $queue = DrupalQueue::get('bfl_import');
  while ($row = fgetcsv($roles_handle)) {
    if(!empty($row[6]) || !empty($row[9]) || !empty($row[7]))
    $roles[$row[0]] = array('business' => $row[6], 'location' => $row[9], 'band' => $row[7]); 
  }
  fclose($roles_handle);
  // Create queue for updating node bfl values.
  if($form_state['values']['create-queue'][1] == 1) {
    $handle = fopen($form_state['storage']['nodes_file']->uri, 'r');
    $queue->deleteQueue();
    $queue = DrupalQueue::get('bfl_import');
    while ($row = fgetcsv($handle)) {
      if(is_numeric($row[0])) {
        $queue->createItem($row[0]);
      }
    }
    fclose($handle);
  }
  $count = 1;
  while($item = $queue->claimItem()) {
    $operations[] = array('node_bfl_import_batch', array($item->data, $roles));
    $queue->deleteItem($item);
    $count++;
    if($count > $form_state['values']['number-of-items']) { 
      break;
    }
  }

  $batch = array(
    'title' => t('BFL Import'),
    'operations' => $operations,
    'finished' => 'bfl_import_finished_callback',
  );
  batch_set($batch);
  // Only needed if not inside a form _submit handler.
  // Setting redirect in batch_process.
  batch_process('bfl-import');
}

function node_bfl_import_batch($nid, $roles, &$context) {

  if(is_numeric($nid)) {
    $node = node_load($nid);

    if($node->workbench_moderation['current']->published == 0) {
      drupal_set_message($node->nid);
      return;
    }

    $uid = $node->uid;
    $node = _get_updated_bfl_entity($node, $roles);

    if($node->type == 'add_page') {
      foreach($node->field_group['und'] as $key=>$item) {
        $group = field_collection_field_get_entity($item);
        $group = _get_updated_bfl_entity($group, $roles);
        foreach($group->field_section['und'] as $key=>$item) {
          $section = field_collection_field_get_entity($item);
          $section = _get_updated_bfl_entity($section, $roles);      
          foreach($section->field_link_type_new['und'] as $key=>$value) {
            $link = field_collection_field_get_entity($item);
            $link = _get_updated_bfl_entity($link, $roles);      
            $link->save(true);
          }
          $section->save(true);
        }
        $group->save(true);
      }
    }
    elseif($node->type == 'create_links') {
      foreach($node->field_url['und'] as $key=>$item) {
        $url = field_collection_field_get_entity($item);
        $url = _get_updated_bfl_entity($url, $roles);      
        $url->save(true);
      }
    }
    elseif($node->type == 'link_to_a_document') {
      foreach($node->field_files['und'] as $key=>$item) {
        $files = field_collection_field_get_entity($item);
        $files = _get_updated_bfl_entity($files, $roles);      
        $files->save(true);
      }      
    }
    node_save($node);

    $context['results'][] = $node->nid . ' : ' . check_plain($node->title);
    $context['message'] = check_plain($node->nid);
  }
}

function _get_geid_term_id($geid) {
  $query = db_select('field_data_field_geid', 'geid')
    ->fields('geid', array('entity_id'))
    ->condition('entity_type', 'taxonomy_term')
    ->condition('field_geid_value', $geid);

  $term = $query->execute()->fetchAll();

  return $term[0]->entity_id;
}

function _get_updated_bfl_entity($entity, $roles) {
  $business = $location = $band = array();
  foreach($entity->field_self_service_roles[LANGUAGE_NONE] as $delta=>$item) {
    $term = taxonomy_term_load($item['tid']);
    $term_name = $term->name;
    if(isset($roles[$term_name])) {
      if(!empty($roles[$term_name]['business'])) {
        $business_explode = explode('|',$roles[$term_name]['business']);
        $business = array_merge($business, $business_explode);
      }
      if(!empty($roles[$term_name]['location'])) {
        $location_explode = explode('|', $roles[$term_name]['location']);
        $location = array_merge($location, $location_explode);
      }
      if(!empty($roles[$term_name]['band'])) {
        $band_explode = explode(',', $roles[$term_name]['band']);
        $band = array_merge($band, $band_explode);
      }
    }
  }
  if(isset($location)) {
    foreach($location as $item) {
      $location_tid[_get_geid_term_id($item)] = _get_geid_term_id($item);
    }
  }

  if(isset($busines)) {
    foreach($business as $item) {
      $business_tid[_get_geid_term_id($item)] = _get_geid_term_id($item);
    }
  }

  if(isset($band)) {
    foreach($band as $item) {
      $term = taxonomy_get_term_by_name($item);
      $band_tid[key($term)] = key($term);
    }
  }

  $business_key = 0;
  foreach($entity->field_business[LANGUAGE_NONE] as $key => $item) {
    if(isset($business_tid[$item[tid]]))
      unset($business_tid[$item['tid']]);
    $business_key = $key;
  }

  if(isset($business_tid)) {
    foreach($business_tid as $item) {
      $business_key++;
      if(!empty($item) && is_numeric($item))
        $entity->field_business[LANGUAGE_NONE][$business_key]['tid'] = $item;
    }
  }

  $location_key = 0;
  foreach($entity->field_location[LANGUAGE_NONE] as $key => $item) {
    if(isset($location_tid[$item[tid]]))
      unset($location_tid[$item['tid']]);
    $location_key = $key;
  }

  if(isset($location_tid)) {
    foreach($location_tid as $item) {
      $location_key++;
      if(!empty($item) && is_numeric($item))
        $entity->field_location[LANGUAGE_NONE][$location_key]['tid'] = $item;
    }
  }

  $band_key = 0;
  foreach($entity->field_band[LANGUAGE_NONE] as $key => $item) {
    if(isset($band_tid[$item[tid]]))
      unset($band_tid[$item['tid']]);
    $band_key = $key;
  }

  if(isset($band_tid)) {
    foreach($band_tid as $item) {
      $band_key++;
      if(!empty($item) && is_numeric($item))
        $entity->field_band[LANGUAGE_NONE][$band_key]['tid'] = $item;
    }
  }

  return $entity;
}