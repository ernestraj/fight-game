<?php

/**
 * Implements hook_menu().
 */
function ge_one_time_node_import_menu() {

    $items['admin/onetimeimport'] = array(
        'title' => 'GE Node One Time Import',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ge_one_time_node_import_form'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['admin/onetimefieldcollections'] = array(
        'title' => 'GE Node One Time Import - field collections',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ge_one_time_field_collection_import_form'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function ge_one_time_field_collection_import_form($form, $fom_state) {
    $form['csvfile'] = array(
        '#type' => 'textfield',
        '#title' => t('csvfile'),
        '#required' => TRUE,
    );
    $form['import'] = array(
        '#type' => 'submit',
        '#value' => 'Import',
        '#required' => TRUE,
    );
    return $form;
}

function ge_one_time_field_collection_import_form_submit($form, &$form_state) {
    $form_values = $form_state['values'];
    $op = $form_values['op'];

    if ($form_values['form_id'] === 'ge_one_time_field_collection_import_form' && $op === 'Import') {
        $file = drupal_http_request($form_values['csvfile'], array('data' => 'text/csv'));
        $data = explode(chr(13), $file->data);
        $delta = 0;
        $line = 1;
        foreach ($data as $row) {
            $csv = str_getcsv($row);
            if (count($csv) !== 4) {
                continue;
            }

            $node_rev_query = db_select('node', 'n')->fields('n', array('vid'));
            $node_rev_obj = $node_rev_query->execute()->fetchAll();
            $node_rev = $node_rev_obj[0]->vid;

            $tid_query = db_select('taxonomy_vocabulary', 'v');
            $tid_query->Join('taxonomy_term_data', 'd', 'v.vid = d.vid');
            $tid_query->fields('d', array('tid'));
            $tid_query->condition('d.name', explode(",", $csv[2]), 'in');
            $tid_query->condition('v.name', 'self service roles', 'like');
            $tids_obj = $tid_query->execute()->fetchAll();

            $id = db_insert('field_collection_item')->fields(array(
                        'field_name' => 'field_files',
                        'revision_id' => 1
                    ))->execute();
            $max_id = db_insert('field_collection_item_revision')->fields(array(
                        'item_id' => $id
                    ))->execute();
            $item_update = db_update('field_collection_item')->fields(array(
                'revision_id' => $max_id
            ));
            $item_update->condition('item_id', $id, '=');
            $item_update->execute();

            $i = 0;
            foreach ($tids_obj as $tid) {
                $roles_insert = db_insert('field_data_field_self_service_roles')->fields(array(
                            'entity_type' => 'field_collection_item',
                            'bundle' => 'field_files',
                            'deleted' => 0,
                            'entity_id' => $id,
                            'revision_id' => $max_id,
                            'language' => 'und',
                            'delta' => $i++,
                            'field_self_service_roles_tid' => $tid->tid
                        ))->execute();
                $roles_insert = db_insert('field_revision_field_self_service_roles')->fields(array(
                            'entity_type' => 'field_collection_item',
                            'bundle' => 'field_files',
                            'deleted' => 0,
                            'entity_id' => $id,
                            'revision_id' => $max_id,
                            'language' => 'und',
                            'delta' => $i++,
                            'field_self_service_roles_tid' => $tid->tid
                        ))->execute();
            }
            $title_id = db_insert('field_data_field_admin_title')->fields(array(
                        'entity_type' => 'field_collection_item',
                        'bundle' => 'field_files',
                        'deleted' => 0,
                        'entity_id' => $id,
                        'revision_id' => $max_id,
                        'language' => 'und',
                        'delta' => $delta,
                        'field_admin_title_value' => $csv[1],
                        'field_admin_title_format' => null,
                    ))->execute();
            $title_id = db_insert('field_revision_field_admin_title')->fields(array(
                        'entity_type' => 'field_collection_item',
                        'bundle' => 'field_files',
                        'deleted' => 0,
                        'entity_id' => $id,
                        'revision_id' => $max_id,
                        'language' => 'und',
                        'delta' => $delta,
                        'field_admin_title_value' => $csv[1],
                        'field_admin_title_format' => null,
                    ))->execute();
            $mime = array(
                'pdf' => 'application/pdf',
                'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                'xls' => 'application/vnd.ms-excel',
                'doc' => 'application/msword',
                'ppt' => 'application/vnd.ms-powerpoint',
                'txt' => 'text/plain',
            );
            $ext = explode(".", $csv[3]);
            $mime = ($ext[count($ext) - 1]);

            $file_query = db_select('file_managed', 'm')->fields('m', array('fid'));
            $file_query->addExpression('count(*)', 'records');
            $file_query->condition('uri', '%' . $ext[0] . '%', 'like');
            $file_obj = $file_query->execute()->fetchAll();
            if ($file_obj[0]->records < 0) {
                $fid_null = db_insert('file_managed')->fields(array(
                            'uid' => 1,
                            'filename' => $csv[3],
                            'uri' => 'private://' . $csv[3],
                            'filemime' => $mime,
                            'filesize' => 1024,
                            'status' => 1,
                            'timestamp' => time(),
                            'type' => 'document'
                        ))->execute();
            }

            $fid_query = db_select('file_managed', 'f');
            $fid_query->addExpression('max(fid)', 'fid');
            $fid_query->condition('uri', '%' . $csv[3] . '%', 'like');
            $fid_obj = $fid_query->execute()->fetchAll();
            $fid = $fid_obj[0]->fid;

            $file_id = db_insert('field_data_field_document')->fields(array(
                        'entity_type' => 'field_collection_item',
                        'bundle' => 'field_files',
                        'deleted' => 0,
                        'entity_id' => $id,
                        'revision_id' => $max_id,
                        'language' => 'und',
                        'delta' => $delta,
                        'field_document_fid' => $fid,
                        'field_document_display' => 1
                    ))->execute();
            $file_id = db_insert('field_revision_field_document')->fields(array(
                        'entity_type' => 'field_collection_item',
                        'bundle' => 'field_files',
                        'deleted' => 0,
                        'entity_id' => $id,
                        'revision_id' => $max_id,
                        'language' => 'und',
                        'delta' => $delta,
                        'field_document_fid' => $fid,
                        'field_document_display' => 1
                    ))->execute();
            $delta_query = db_select('field_data_field_files', 'f');
            $delta_query->addExpression('max(delta)', 'delta');
            $delta_query->condition('entity_id', (int) trim($csv[0]), '=');

            $delta_obj = $delta_query->execute()->fetchAll();

            var_dump("--------------------------");
            var_dump($row);
            var_dump((int) trim($csv[0]));
            var_dump($delta_obj[0]->delta);

            $field_files_id = db_insert('field_data_field_files')->fields(array(
                        'entity_type' => 'node',
                        'bundle' => 'link_to_a_document',
                        'deleted' => 0,
                        'entity_id' => (int) $csv[0],
                        'revision_id' => $node_rev,
                        'language' => 'und',
                        'delta' => (int) $delta_obj[0]->delta + 1,
                        'field_files_value' => (int) $id,
                        'field_files_revision_id' => $max_id
                    ))->execute();
            $field_files_id = db_insert('field_revision_field_files')->fields(array(
                        'entity_type' => 'node',
                        'bundle' => 'link_to_a_document',
                        'deleted' => 0,
                        'entity_id' => (int) $csv[0],
                        'revision_id' => $node_rev,
                        'language' => 'und',
                        'delta' => (int) $delta_obj[0]->delta + 1,
                        'field_files_value' => (int) $id,
                        'field_files_revision_id' => $max_id
                    ))->execute();
            $delta++;
        }
    }
}

function ge_one_time_node_import_form($form, &$form_state) {
    $form['path'] = array(
        '#type' => 'textfield',
        '#title' => t('how many nodes shall be imported?'),
        '#required' => TRUE,
    );
    $form['import'] = array(
        '#type' => 'submit',
        '#value' => 'Import',
        '#required' => TRUE,
    );
    return $form;
}

function ge_one_time_node_import_form_submit($form, &$form_state) {
    $form_values = $form_state['values'];
    $op = $form_values['op'];

    if ($form_values['form_id'] === 'ge_one_time_node_import_form' && $op === 'Import') {
        set_time_limit(0);

        $max = isset($form_values['maxnodes']) ? $form_values['maxnodes'] : 10000;

        for ($i = 0; $i < $max; $i++) {
            $sizes = array('large', 'Extra', 'meduim', 'small');
            $aligns = array('left', 'right');
            $countries = array(2318, 4049, 2323, 2309, 2319, 2304, 2325);
            $rnd = (int) (rand(0, count($countries)));
//            $country_obj = taxonomy_get_term_by_name($countries[$rnd], 'country');
//            foreach ($country_obj as $country){
//                $country_id = $country->tid;
//                break;
//            }
            $roles = array(5153, 5208);
            // $menu = db_query("SELECT taxonomy_term_data.name AS taxonomy_term_data_name, taxonomy_term_data.vid AS taxonomy_term_data_vid, taxonomy_term_data.tid AS tid, taxonomy_vocabulary.machine_name AS taxonomy_vocabulary_machine_name
// FROM 
// {taxonomy_term_data} taxonomy_term_data
// LEFT JOIN {field_data_field_menu_country} field_data_field_menu_country ON taxonomy_term_data.tid = field_data_field_menu_country.entity_id AND (field_data_field_menu_country.entity_type = 'taxonomy_term' AND field_data_field_menu_country.deleted = '0')
// LEFT JOIN {taxonomy_vocabulary} taxonomy_vocabulary ON taxonomy_term_data.vid = taxonomy_vocabulary.vid
// WHERE (( (field_data_field_menu_country.field_menu_country_tid = '%c' ) AND (taxonomy_term_data.tid IN('4230', '4231', '5153', '5208', '13730', '13731', '13733', '13734', '13735', '13736', '13732', '15995', '1926', '1927', '1928', '1923', '1920', '1913') ) ))", array('%c' => $countries[(int)(rand(0, 1))]));

            $role = array();
            $rand = (int) (rand(0, 10));
            $fid = 18624; //(int) (18624 * rand(-20, 20));
            // $menu->execute();
            // $field_menu = $menu->fetchAll();
            // var_dump($field_menu);die();
            // unset($menu);
            $fields_values = array(
                'body' => array(//
                    'value' => $i . " Test Node " . time()
                ),
                'field_image_banner' => array(//
                    'fid' => $fid
                ),
                'field_body_image_type' => array(//
                    'value' => $sizes[(int) (rand(0, 3))]
                ),
                'field_body_image_alignment' => array(//
                    'value' => $aligns[(int) (rand(0, 1))]
                ),
//                'field_asset ' => array(//
//                    'fid' => $fid
//                ),
                'field_section_style' => array(
                    'value' => 'regular'
                ),
                'field_menu' => array(
                    'tid' => 15995
                ),
                'field_body_image' => array(//
                    'fid' => $fid
                ),
                'field_self_service_roles' => array(
                    'tid' => $roles[(int) (rand(0, 1))]
                ),
            );

            $realNode = new stdClass();
            $realNode->type = 'add_page';
            $realNode->status = 1;
            $realNode->uid = 1;
            $realNode->language = 'und';
            $realNode->title = $i . " Test Node " . time();
            foreach ($fields_values as $field => $value) {
                foreach ($value as $key => $data) {
                    $realNode->{$field}['und'][][$key] = $data;
                }
            }
//             print "<pre>";
//            print_r($realNode);
//            print "</pre>";
//            die();
            node_save($realNode);
            print "<br/> node saved " . $realNode->nid . "<br/>";
            $random = (int) (rand(1, 5));
            for ($j = 0; $j < $random; $j++) {
                $fid = $fid = 18623; //(int) (18623 * rand(-20, 20));
                $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_group'));
                $field_collection_item->setHostEntity('node', $realNode);
                $field_collection_item->field_title['und'][]['value'] = $i . " Test Node " . time();
                $field_collection_item->field_admin_title['und'][]['value'] = $i . " Test Node " . time();
                $field_collection_item->field_body ['und'][]['value'] = $i . " Test Node " . time();
//                $field_collection_item->field_asset =array();

                $role[] = array('tid' => $roles[(int) (rand(0, count($roles) - 1))]);

                $field_collection_item->field_self_service_roles ['und'] = $role;
                $field_collection_item->save();
                print "field collection  GROUP saved";
                for ($k = 0; $k < 3; $k++) {
                    $window = array(1895, 1896, 1897);
                    $type = array('existing url', 'file', 'link');
                    $subfield_collection_item = entity_create('field_collection_item', array('field_name' => 'field_section'));
                    $subfield_collection_item->setHostEntity('field_collection_item', $field_collection_item);
                    $subfield_collection_item->field_title['und'][]['value'] = $i . " Test Node " . time();
                    $subfield_collection_item->field_section_layout['und'][]['value'] = $i . " Test Node " . time();

                    $role[] = array('tid' => $roles[(int) (rand(0, count($roles) - 1))]);
                    $subfield_collection_item->field_self_service_roles['und'] = $role;
                    $subfield_collection_item->field_body_image_type['und'][]['value'] = $sizes[(int) (rand(0, 3))];
                    $subfield_collection_item->field_body_image_alignment['und'][]['value'] = $aligns[(int) (rand(0, 1))];
                    $subfield_collection_item->field_body_image['und'][]['fid'] = $fid;
                    $subfield_collection_item->field_body['und'][]['value'] = $i . " Test Node " . time();
//                    $subfield_collection_item->field_asset['und'][]['fid'] = array();
                    $subfield_collection_item->field_linktype['und'][]['value'] = $type[(int) (rand(0, 2))];
                    $subfield_collection_item->field_window_types['und'][]['value'] = $window[(int) (rand(0, 2))];
                    $subfield_collection_item->save();
                    $field_collection_item->field_section['und'][] = array('value' => $subfield_collection_item->item_id);
                    unset($subfield_collection_item);
                    print "field collection SECTION saved";
                }
                $realNode->field_group['und'][] = array('value' => $field_collection_item->item_id);
                unset($field_collection_item);
            }

            node_save($realNode);
        }
        set_time_limit(0);
    }
}
